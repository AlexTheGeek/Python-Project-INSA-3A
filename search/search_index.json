{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the documentation of the Python Project 3A MRI English You will find on this site the complete documentation of the python project available on Github . For english documentation click here Fran\u00e7ais Vous trouverez sur ce site la documenation compl\u00e8te du projet python disponible sur Github . Pour la documentation en fran\u00e7ais, cliquez ici . Retrouvez aussi la documentation au format PDF .","title":"Overview"},{"location":"#welcome-to-the-documentation-of-the-python-project-3a-mri","text":"","title":"Welcome to the documentation of the Python Project 3A MRI"},{"location":"#english","text":"You will find on this site the complete documentation of the python project available on Github . For english documentation click here","title":"English"},{"location":"#francais","text":"Vous trouverez sur ce site la documenation compl\u00e8te du projet python disponible sur Github . Pour la documentation en fran\u00e7ais, cliquez ici . Retrouvez aussi la documentation au format PDF .","title":"Fran\u00e7ais"},{"location":"about/","text":"About Members The group members are : - Damien Briquet - Alexis Brunet INSA CVL | 3A MRI TD3 - TP5 Contact For any questions, please contact us at this email address : contact[at]lapinfo[dot]ovh.","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#members","text":"The group members are : - Damien Briquet - Alexis Brunet INSA CVL | 3A MRI TD3 - TP5","title":"Members"},{"location":"about/#contact","text":"For any questions, please contact us at this email address : contact[at]lapinfo[dot]ovh.","title":"Contact"},{"location":"EN/","text":"English documentation of the python project Contents Objectives Installing Python Windows Mac 1st method: Official Website 2nd method: Homebrew Linux Installing an IDE Visual Studio Code Windows - Mac Linux - Ubuntu, Debian Spyder IDE Python (Windows - Mac) Installation of dependencies Windows Method 1: Anaconda Method 2 : pip Mac Linux The program Lauch Example of programme launch Windows 10 MacOS Linux (Ubuntu) Code explanation Block 1 : initialisation of a DataFrame from a csv file Block 2 : scatter plot of the temperature distribution Block 3 : histogram graph of the Max temperature distribution Block 4 : initialization of the prediction Block 5 : vertical bar graph of the distribution of predicted and measured values Block 6 : graph of the regression line Block 7 : some values of the prediction Block 8 : statistics from a table of averages Block of the associated function Block 9 : step diagram Block 10 : Shapiro-Wilk test Block 11 : moustache box Block 12 : probability curve Block 13 : regression coefficient Block 14 : diagram moustache box Block 15 : test between the two models Block 16 : discriminant Functions pandas matplotlib seaborn sklearn numpy scipy mlxtend Sources","title":"Home"},{"location":"EN/#english-documentation-of-the-python-project","text":"","title":"English documentation of the python project"},{"location":"EN/#contents","text":"Objectives Installing Python Windows Mac 1st method: Official Website 2nd method: Homebrew Linux Installing an IDE Visual Studio Code Windows - Mac Linux - Ubuntu, Debian Spyder IDE Python (Windows - Mac) Installation of dependencies Windows Method 1: Anaconda Method 2 : pip Mac Linux The program Lauch Example of programme launch Windows 10 MacOS Linux (Ubuntu) Code explanation Block 1 : initialisation of a DataFrame from a csv file Block 2 : scatter plot of the temperature distribution Block 3 : histogram graph of the Max temperature distribution Block 4 : initialization of the prediction Block 5 : vertical bar graph of the distribution of predicted and measured values Block 6 : graph of the regression line Block 7 : some values of the prediction Block 8 : statistics from a table of averages Block of the associated function Block 9 : step diagram Block 10 : Shapiro-Wilk test Block 11 : moustache box Block 12 : probability curve Block 13 : regression coefficient Block 14 : diagram moustache box Block 15 : test between the two models Block 16 : discriminant Functions pandas matplotlib seaborn sklearn numpy scipy mlxtend Sources","title":"Contents"},{"location":"EN/code/","text":"Code explanation In this part we will explain the different actions made by the programme, through blocks of lines of code. In this way we will present an output possible thanks to these lines. You can also find the complete code annotated at this address for the main and the function . First of all our program is composed of two Python scripts : - main.py : containing the body of the programme (python script to be executed to launch the programme) - function.py: containing the function used in main.py Block 1: initialisation of a DataFrame from a csv file Comma-separated data retrieval from a csv file to generate a sample in a random way, and thus display information about this DataFrame (dimension, statistics, memory usage, non-zero values, columns, dtype index, ...). dataset1 = pd.read_csv('weather.csv') #Reading a file (csv) of comma-separated values in a DataFrame dataset1.sample() #Generating a random sample of each group of an object in the DataFrame dataset=dataset1.sample(1000) #A new DataFrame (dataset) containing 1000 randomly sampled elements from dataset1 print(dataset.shape) #Display of a tuple representing the dimension of the DataFrame dataset print(dataset.describe()) #Display of statistics for each type of DataFrame values dataset.info() #Displays DataFrame information, including dtype index, colonnnes and non-zero values and memory usage. Possible output: Block 2: scatter plot of the temperature distribution Display of the temperature distribution as a function of minimum and maximum temperatures in a scatter plot dataset.plot(x='Temp_Min', y='Temp_Max', style='o') #Creating a DataFrame plot, with the x-axis representing Temp_min and the y-axis representing Temp_Max, in a scatter plot style. plt.title('Temp_Min vs Temp_Max') #Setting the graph title plt.xlabel('Temp_Min') #Setting the x-axis title plt.ylabel('Temp_Max') #Setting the y-axis title plt.show() #Graphic/Figure display Possible output: Block 3: histogram graph of the Max temperature distribution Creation of a histogram graph to visualize the distribution of the Temp_Max values of the DataFrame plt.figure(figsize=(15,10)) #Creation of a figure of a size defined by figsize in inch, 15 inch wide and 10 inch high plt.tight_layout() #Adjusting the borders between and around the plot seabornInstance.distplot(dataset['Temp_Max']) #Allows you to draw a distribution plot on a FacetGrid, allowing you to view the Temp_Max DataFrame data in a histogram format (default). plt.show() #Graphic/Figure display Possible output: Block 4: initialization of the prediction Predicting Temp_Max from the previous file X = dataset['Temp_Min'].values.reshape(-1,1) #The X value includes the Temp_Min attribute y = dataset['Temp_Max'].values.reshape(-1,1) #The value includes the Temp_Max attribute X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) #Allocation of 80% of the data to the training set and the rest to the test set reg = LinearRegression().fit(X_train, y_train) #Training of the model using the training set print(reg.intercept_) #Intersection display print(reg.coef_) #Display of the directing coefficient of the regression line y_pred = reg.predict(X_test) #Using test data to make predictions about Temp_Max df = pd.DataFrame({'Actuelle(Mesur\u00e9es)': y_test.flatten(), 'Pr\u00e9diction(mod\u00e8le)': y_pred.flatten()}) #Building a DataFrame from predicted data and tests print(df) #Displaying DataFrame Possible output: Block 5: vertical bar graph of the distribution of predicted and measured values Creation of the vertical bar graph showing the distribution of measured and predicted temperatures. df1 = df.head(25) #Retrieving the first 25 lines of df to put them in df1 df1.plot(kind='bar',figsize=(16,10)) #Creation of DataFrame, size 16inch wide and 10inch high, and the style of the graph will be vertical bars plt.grid(which='major', linestyle='-', linewidth='0.5', color='green') #Creation of the internal grid (major) of the graphic with a solid line style, 0.5 points thick, one green colour plt.grid(which='minor', linestyle=':', linewidth='0.5', color='black') #Creation of the frame (minor) of the graphic with a dotted line style, 0.5 points thick, one black colour plt.show() #Graphic/Figure display Possible output: Block 6: graph of the regression line Creation of a scatter plot in grey with the previously calculated regression line in red plt.title('Mod\u00e8le ax+y') #Setting the chart title plt.xlabel('Temp_Min') #Setting the x-axis title plt.ylabel('Temp_Max') #Setting the y-axis title plt.scatter(X_test, y_test, color='gray') #Creation of a scatter diagram y_test vs. X_test of grey colour plt.plot(X_test, y_pred, color='red', linewidth=2) #CCreation of a DataFrame plot (of the ax+y function), with the x-axis representing the X_Test and the y-axis representing the y_pred, in red colour and 2 points wide. plt.show() #Graphic/Figure display Possible output: Block 7: some values of the prediction Displays values based on predictions print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred)) #Display of the calculation of the mean absolute values of the errors print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred)) #Display of mean squared error print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred))) #Display of the root mean squared error Possible output: Block 8: statistics from a table of averages Addition of mean values in a table, display of this table and mean values and standard deviation Means = [] #Creation of an empty table of average values Means=testSamples(200, 100,dataset['Temp_Min']) #Adding average values to the table with the previously created testSamples function print(Means) #Displaying the mean value table print(np.mean(Means)) #Displaying the average of the Means table print(np.mean(dataset['Temp_Min'])) #Displaying the average of the dataset['Temp_Min'] table print(np.std(Means)) #Displays the standard deviation of the values in the Means table. print(np.std(dataset['Temp_Min'])) #Displays the standard deviation of the values in the dataset['Temp_Min'] table Block of the associated function The testSamples function allows you to create values from a sample and thus insert them into a table. class fonction: #Creation of the function class for all functions that can be used for temp.py def testSamples(numTrials, sampleSize, data): #D\u00e9finition de la fonction testSamples prenant en param\u00e8tre numTrials (int), sampleSize (int), data (tableau de float) Means = [] #Definition of the testSamples function taking in parameters numTrials (int), sampleSize (int), data (float array) for t in range(numTrials): #Loop for starting from 0 going to numTrials-1 in steps of Y=data.sample(sampleSize) #Y retrieves a random sample of elements of size sampleSize Means.append(sum(Y)/len(Y)) #Addition in the table of the division of the sum of Y divided by the length of Y return Means #We return the Means table Possible output: Block 9: step diagram Creation of a stepped histogram plt.figure(1) #Creation of a figure with a unique identifier equal to 1 plt.hist(Means, bins=10, histtype='step') #Creation of a stepped histogram with a single line and without filling, with 10 steps of the same width. plt.show() #Graphic/Figure display Possible output: Block 10: Shapiro-Wilk test Shapiro-Wilk test on a normally distributed population stat, p = stats.shapiro(Means) #We do the Shapiro-Wilk test which verifies the null hypothesis according to Means' data, and returns the value of the test statistic and the p-value for the test hypothesis. print('Statistics={}, p={}'.format(stat, p)) #Display of statistics and p-value alpha = 0.05 #Initilization of alpha if p > alpha: #Test between p-value and alpha print('Sample looks Normal (do not reject H0)') #Display if p-value > alpha else: print('Sample does not look Normal (reject H0)') #Display if p-value < alpha Possible output: Block 11: moustache box A box and whisker plot. The box extends from the values in the lower quartile to the upper quartile of the data, with a line at the median. The whiskers extend from the box to show the extent of the data. Flier points are those past the end of the whiskers. plt.boxplot(Means) #Creation of a box and whisker plot plt.show() #Graphic/Figure display Possible output: Block 12: probability curve Creation and display of the probability curve stats.probplot(Means, plot=plt) #Calculates the quantiles of the Means normal probability curve and the plot with matplotlib plt.show() #Graphic/Figure display Possible output: Block 13: regression coefficient Writing the calculation of the linear regression coefficient in two different ways X, y = make_classification(n_samples=100, n_features=10, n_informative=10, n_redundant=0, random_state=1) #Setting up the cloud plot model1 = LogisticRegression() #Initialization of the evaluation of model 1 by the LogisticRegression() function cv1 = RepeatedStratifiedKFold(n_splits=2, n_repeats=5, random_state=1) #Setting the variable cv1 scores1 = cross_val_score(model1, X, y, scoring='accuracy', cv=cv1, n_jobs=-1) #Setting the variable scores1 print('LogisticRegression Mean Accuracy: %.3f (%.3f)' % (np.mean(scores1), np.std(scores1))) #Display of the average linear regression coefficient for model 1 model2 = LinearDiscriminantAnalysis() #Initiation of the evaluation of model 2 by the function cv2 = RepeatedStratifiedKFold(n_splits=2, n_repeats=5, random_state=1) #Setting the cv2 variable scores2 = cross_val_score(model2, X, y, scoring='accuracy', cv=cv2, n_jobs=-1) #Setting the scores2 variable print('LinearDiscriminantAnalysis Mean Accuracy: %.3f (%.3f)' % (np.mean(scores2), np.std(scores2))) #Display of the average linear regression coefficient for model 2 Possible output: Block 14: diagram moustache box Creation of a box and whisker plot plt.boxplot([scores1, scores2], labels=['LR', 'LDA'], showmeans=True) #Creation of a box and whisker plot from scores1 and scores2 plt.show() #Graphic/Figure display Possible output: Block 15: test between the two models Determination of P-value and T-stastitic for testing between the two models t, p = paired_ttest_5x2cv(estimator1=model1, estimator2=model2, X=X, y=y, scoring='accuracy', random_seed=1) #Initialization of the value pair t and p print('P-value: %.3f, t-Statistic: %.3f' % (p, t)) #Display of the p-Value and t-Statistic initialised above if p <= 0.05: #Test of the value of the variable p print('Difference between mean performance is probably real') #Display if p<=0.05 else: print('Algorithms probably have the same performance') #Display if p>0.05 Possible output: Block 16: discriminant Discriminant analysis X = standardize(X) #Smoothing of variable X lda = ldaf(n_discriminants=2) #Initialization of the discriminator lda.fit(X, y) #Training the model using the training package X_lda = lda.transform(X) #Transforms the values so that they can be used by the following functions plt.figure(figsize=(6, 4)) #Creation of a figure with a certain size specified as an argument for lab, col in zip((0, 1),('blue', 'red')): #Loop for plotting the cloud plot according to line and column plt.scatter(X_lda[y == lab, 0],X_lda[y == lab, 1],label=lab,c=col) #Plotting the cloud plot plt.xlabel('Linear Discriminant 1') #Setting x-axis title plt.ylabel('Linear Discriminant 2') #Setting y-axis title plt.legend(loc='lower right') #Setting the legend on the bottom right-hand side plt.tight_layout() #Adjusting the borders between and around the undercuts plt.show() #Graphic/Figure display Possible output:","title":"Code explanation"},{"location":"EN/code/#code-explanation","text":"In this part we will explain the different actions made by the programme, through blocks of lines of code. In this way we will present an output possible thanks to these lines. You can also find the complete code annotated at this address for the main and the function . First of all our program is composed of two Python scripts : - main.py : containing the body of the programme (python script to be executed to launch the programme) - function.py: containing the function used in main.py","title":"Code explanation"},{"location":"EN/code/#block-1-initialisation-of-a-dataframe-from-a-csv-file","text":"Comma-separated data retrieval from a csv file to generate a sample in a random way, and thus display information about this DataFrame (dimension, statistics, memory usage, non-zero values, columns, dtype index, ...). dataset1 = pd.read_csv('weather.csv') #Reading a file (csv) of comma-separated values in a DataFrame dataset1.sample() #Generating a random sample of each group of an object in the DataFrame dataset=dataset1.sample(1000) #A new DataFrame (dataset) containing 1000 randomly sampled elements from dataset1 print(dataset.shape) #Display of a tuple representing the dimension of the DataFrame dataset print(dataset.describe()) #Display of statistics for each type of DataFrame values dataset.info() #Displays DataFrame information, including dtype index, colonnnes and non-zero values and memory usage. Possible output:","title":"Block 1: initialisation of a DataFrame from a csv file"},{"location":"EN/code/#block-2-scatter-plot-of-the-temperature-distribution","text":"Display of the temperature distribution as a function of minimum and maximum temperatures in a scatter plot dataset.plot(x='Temp_Min', y='Temp_Max', style='o') #Creating a DataFrame plot, with the x-axis representing Temp_min and the y-axis representing Temp_Max, in a scatter plot style. plt.title('Temp_Min vs Temp_Max') #Setting the graph title plt.xlabel('Temp_Min') #Setting the x-axis title plt.ylabel('Temp_Max') #Setting the y-axis title plt.show() #Graphic/Figure display Possible output:","title":"Block 2: scatter plot of the temperature distribution"},{"location":"EN/code/#block-3-histogram-graph-of-the-max-temperature-distribution","text":"Creation of a histogram graph to visualize the distribution of the Temp_Max values of the DataFrame plt.figure(figsize=(15,10)) #Creation of a figure of a size defined by figsize in inch, 15 inch wide and 10 inch high plt.tight_layout() #Adjusting the borders between and around the plot seabornInstance.distplot(dataset['Temp_Max']) #Allows you to draw a distribution plot on a FacetGrid, allowing you to view the Temp_Max DataFrame data in a histogram format (default). plt.show() #Graphic/Figure display Possible output:","title":"Block 3: histogram graph of the Max temperature distribution"},{"location":"EN/code/#block-4-initialization-of-the-prediction","text":"Predicting Temp_Max from the previous file X = dataset['Temp_Min'].values.reshape(-1,1) #The X value includes the Temp_Min attribute y = dataset['Temp_Max'].values.reshape(-1,1) #The value includes the Temp_Max attribute X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) #Allocation of 80% of the data to the training set and the rest to the test set reg = LinearRegression().fit(X_train, y_train) #Training of the model using the training set print(reg.intercept_) #Intersection display print(reg.coef_) #Display of the directing coefficient of the regression line y_pred = reg.predict(X_test) #Using test data to make predictions about Temp_Max df = pd.DataFrame({'Actuelle(Mesur\u00e9es)': y_test.flatten(), 'Pr\u00e9diction(mod\u00e8le)': y_pred.flatten()}) #Building a DataFrame from predicted data and tests print(df) #Displaying DataFrame Possible output:","title":"Block 4: initialization of the prediction"},{"location":"EN/code/#block-5-vertical-bar-graph-of-the-distribution-of-predicted-and-measured-values","text":"Creation of the vertical bar graph showing the distribution of measured and predicted temperatures. df1 = df.head(25) #Retrieving the first 25 lines of df to put them in df1 df1.plot(kind='bar',figsize=(16,10)) #Creation of DataFrame, size 16inch wide and 10inch high, and the style of the graph will be vertical bars plt.grid(which='major', linestyle='-', linewidth='0.5', color='green') #Creation of the internal grid (major) of the graphic with a solid line style, 0.5 points thick, one green colour plt.grid(which='minor', linestyle=':', linewidth='0.5', color='black') #Creation of the frame (minor) of the graphic with a dotted line style, 0.5 points thick, one black colour plt.show() #Graphic/Figure display Possible output:","title":"Block 5: vertical bar graph of the distribution of predicted and measured values"},{"location":"EN/code/#block-6-graph-of-the-regression-line","text":"Creation of a scatter plot in grey with the previously calculated regression line in red plt.title('Mod\u00e8le ax+y') #Setting the chart title plt.xlabel('Temp_Min') #Setting the x-axis title plt.ylabel('Temp_Max') #Setting the y-axis title plt.scatter(X_test, y_test, color='gray') #Creation of a scatter diagram y_test vs. X_test of grey colour plt.plot(X_test, y_pred, color='red', linewidth=2) #CCreation of a DataFrame plot (of the ax+y function), with the x-axis representing the X_Test and the y-axis representing the y_pred, in red colour and 2 points wide. plt.show() #Graphic/Figure display Possible output:","title":"Block 6: graph of the regression line"},{"location":"EN/code/#block-7-some-values-of-the-prediction","text":"Displays values based on predictions print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred)) #Display of the calculation of the mean absolute values of the errors print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred)) #Display of mean squared error print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred))) #Display of the root mean squared error Possible output:","title":"Block 7: some values of the prediction"},{"location":"EN/code/#block-8-statistics-from-a-table-of-averages","text":"Addition of mean values in a table, display of this table and mean values and standard deviation Means = [] #Creation of an empty table of average values Means=testSamples(200, 100,dataset['Temp_Min']) #Adding average values to the table with the previously created testSamples function print(Means) #Displaying the mean value table print(np.mean(Means)) #Displaying the average of the Means table print(np.mean(dataset['Temp_Min'])) #Displaying the average of the dataset['Temp_Min'] table print(np.std(Means)) #Displays the standard deviation of the values in the Means table. print(np.std(dataset['Temp_Min'])) #Displays the standard deviation of the values in the dataset['Temp_Min'] table","title":"Block 8: statistics from a table of averages"},{"location":"EN/code/#block-of-the-associated-function","text":"The testSamples function allows you to create values from a sample and thus insert them into a table. class fonction: #Creation of the function class for all functions that can be used for temp.py def testSamples(numTrials, sampleSize, data): #D\u00e9finition de la fonction testSamples prenant en param\u00e8tre numTrials (int), sampleSize (int), data (tableau de float) Means = [] #Definition of the testSamples function taking in parameters numTrials (int), sampleSize (int), data (float array) for t in range(numTrials): #Loop for starting from 0 going to numTrials-1 in steps of Y=data.sample(sampleSize) #Y retrieves a random sample of elements of size sampleSize Means.append(sum(Y)/len(Y)) #Addition in the table of the division of the sum of Y divided by the length of Y return Means #We return the Means table Possible output:","title":"Block of the associated function"},{"location":"EN/code/#block-9-step-diagram","text":"Creation of a stepped histogram plt.figure(1) #Creation of a figure with a unique identifier equal to 1 plt.hist(Means, bins=10, histtype='step') #Creation of a stepped histogram with a single line and without filling, with 10 steps of the same width. plt.show() #Graphic/Figure display Possible output:","title":"Block 9: step diagram"},{"location":"EN/code/#block-10-shapiro-wilk-test","text":"Shapiro-Wilk test on a normally distributed population stat, p = stats.shapiro(Means) #We do the Shapiro-Wilk test which verifies the null hypothesis according to Means' data, and returns the value of the test statistic and the p-value for the test hypothesis. print('Statistics={}, p={}'.format(stat, p)) #Display of statistics and p-value alpha = 0.05 #Initilization of alpha if p > alpha: #Test between p-value and alpha print('Sample looks Normal (do not reject H0)') #Display if p-value > alpha else: print('Sample does not look Normal (reject H0)') #Display if p-value < alpha Possible output:","title":"Block 10: Shapiro-Wilk test"},{"location":"EN/code/#block-11-moustache-box","text":"A box and whisker plot. The box extends from the values in the lower quartile to the upper quartile of the data, with a line at the median. The whiskers extend from the box to show the extent of the data. Flier points are those past the end of the whiskers. plt.boxplot(Means) #Creation of a box and whisker plot plt.show() #Graphic/Figure display Possible output:","title":"Block 11: moustache box"},{"location":"EN/code/#block-12-probability-curve","text":"Creation and display of the probability curve stats.probplot(Means, plot=plt) #Calculates the quantiles of the Means normal probability curve and the plot with matplotlib plt.show() #Graphic/Figure display Possible output:","title":"Block 12: probability curve"},{"location":"EN/code/#block-13-regression-coefficient","text":"Writing the calculation of the linear regression coefficient in two different ways X, y = make_classification(n_samples=100, n_features=10, n_informative=10, n_redundant=0, random_state=1) #Setting up the cloud plot model1 = LogisticRegression() #Initialization of the evaluation of model 1 by the LogisticRegression() function cv1 = RepeatedStratifiedKFold(n_splits=2, n_repeats=5, random_state=1) #Setting the variable cv1 scores1 = cross_val_score(model1, X, y, scoring='accuracy', cv=cv1, n_jobs=-1) #Setting the variable scores1 print('LogisticRegression Mean Accuracy: %.3f (%.3f)' % (np.mean(scores1), np.std(scores1))) #Display of the average linear regression coefficient for model 1 model2 = LinearDiscriminantAnalysis() #Initiation of the evaluation of model 2 by the function cv2 = RepeatedStratifiedKFold(n_splits=2, n_repeats=5, random_state=1) #Setting the cv2 variable scores2 = cross_val_score(model2, X, y, scoring='accuracy', cv=cv2, n_jobs=-1) #Setting the scores2 variable print('LinearDiscriminantAnalysis Mean Accuracy: %.3f (%.3f)' % (np.mean(scores2), np.std(scores2))) #Display of the average linear regression coefficient for model 2 Possible output:","title":"Block 13: regression coefficient"},{"location":"EN/code/#block-14-diagram-moustache-box","text":"Creation of a box and whisker plot plt.boxplot([scores1, scores2], labels=['LR', 'LDA'], showmeans=True) #Creation of a box and whisker plot from scores1 and scores2 plt.show() #Graphic/Figure display Possible output:","title":"Block 14: diagram moustache box"},{"location":"EN/code/#block-15-test-between-the-two-models","text":"Determination of P-value and T-stastitic for testing between the two models t, p = paired_ttest_5x2cv(estimator1=model1, estimator2=model2, X=X, y=y, scoring='accuracy', random_seed=1) #Initialization of the value pair t and p print('P-value: %.3f, t-Statistic: %.3f' % (p, t)) #Display of the p-Value and t-Statistic initialised above if p <= 0.05: #Test of the value of the variable p print('Difference between mean performance is probably real') #Display if p<=0.05 else: print('Algorithms probably have the same performance') #Display if p>0.05 Possible output:","title":"Block 15: test between the two models"},{"location":"EN/code/#block-16-discriminant","text":"Discriminant analysis X = standardize(X) #Smoothing of variable X lda = ldaf(n_discriminants=2) #Initialization of the discriminator lda.fit(X, y) #Training the model using the training package X_lda = lda.transform(X) #Transforms the values so that they can be used by the following functions plt.figure(figsize=(6, 4)) #Creation of a figure with a certain size specified as an argument for lab, col in zip((0, 1),('blue', 'red')): #Loop for plotting the cloud plot according to line and column plt.scatter(X_lda[y == lab, 0],X_lda[y == lab, 1],label=lab,c=col) #Plotting the cloud plot plt.xlabel('Linear Discriminant 1') #Setting x-axis title plt.ylabel('Linear Discriminant 2') #Setting y-axis title plt.legend(loc='lower right') #Setting the legend on the bottom right-hand side plt.tight_layout() #Adjusting the borders between and around the undercuts plt.show() #Graphic/Figure display Possible output:","title":"Block 16: discriminant"},{"location":"EN/dependances/","text":"Installation of dependencies You need to install several outbuildings for the project to run smoothly. You need the following dependencies : - numpy is used to create and manipulate multi-dimensional tables and allows the use of mathematical functions in these tables. - pandas allows us to manipulate and analyse numerical data and time series. - seaborn is our interface for displaying results in the form of statistical graphs. - statsmodels brings together existing statistical mathematical models in order to make forecasts. - mlxtend is a learning machine module analysing data so that we can then develop and refine the forecasts. - matplotlib is designed to draw graphs from data. Windows You can install the outbuildings either with Anaconda (method 1) or with pip (method 2) . Method 1: Anaconda This method is simpler because you will install Anaconda which will install some of the other outbuildings (Numpy, Pandas) needed for the project. Download the latest version of Anaconda for Windows from the site . Run the .exe file, follow the instructions on the screen until the installation is complete. Then you will install the last necessary mlxtend dependency, so open an Anaconda Terminal through the Windows search tool by typing \"Anaconda Powershell Prompt\", and copy the following command: conda install mlxtend --channel conda-forge Now all the necessary dependencies are installed. Method 2: pip Check that pip is installed with the command: pip -V If it is not installed, download the python file get-pip.py . Place this python file in the installation folder, the path to this folder looks like C:\\Users\\XXX\\AppData\\Local\\Programs\\Python-38\\ Python-38 is the version of your Python, which you can find out by opening a cmd and typing the command python --version . XXX corresponds to your Windows username. Then open a cmd, and browse to this Python folder with the cd command C:\\Users\\XXXX\\AppData\\Local\\Programs\\Python-38\\ Then execute the script: python get-pip.py Et voila! pip is now installed on your system. You can check again with the command : pip -V Now you can install the outbuildings. First of all, download the zip of the project . Unzip it, open a CMD and type the following commands: cd C:\\Users\\XXX\\Documents\\Projet-Python-INSA-3A #For example, depending on where you put it, here it is in the Documents pip install -r requirements.txt Now all the necessary dependencies are installed. Mac To install these dependencies, you will use pip a Python package manager. Install pip with the following commands: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py pip is normally installed. To check, type : pip --version Download the zip of the project at this address or with the following command: curl -LJ -o weather.zip https://github.com/AlexTheGeek/Python-Project-INSA-3A/archive/v1.zip Open a Terminal and type the following commands: unzip weather.zip cd Project-Python-3A-MRI-1 pip install -r requirements.txt Now all the necessary dependencies are installed. Linux To install the dependencies, pip must be installed on your system : On Ubuntu to install pip, you can type the following command: sudo apt-get install python3-pip . Next you will use the pip command, but going through the apt package manager, for this you will need to type the command pip3 . curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py pip is normally installed. To check, type : pip --version Now you can install the dependencies. Download the zip of the project at this address or with the following command: curl -LJ -o weather.zip https://github.com/AlexTheGeek/Python-Project-INSA-3A/archive/v1.zip Open a Terminal and type the following commands: unzip weather.zip cd Project-Python-3A-MRI-1 pip install -r requirements.txt Now all the necessary dependencies are installed.","title":"Dependencies"},{"location":"EN/dependances/#installation-of-dependencies","text":"You need to install several outbuildings for the project to run smoothly. You need the following dependencies : - numpy is used to create and manipulate multi-dimensional tables and allows the use of mathematical functions in these tables. - pandas allows us to manipulate and analyse numerical data and time series. - seaborn is our interface for displaying results in the form of statistical graphs. - statsmodels brings together existing statistical mathematical models in order to make forecasts. - mlxtend is a learning machine module analysing data so that we can then develop and refine the forecasts. - matplotlib is designed to draw graphs from data.","title":"Installation of dependencies"},{"location":"EN/dependances/#windows","text":"You can install the outbuildings either with Anaconda (method 1) or with pip (method 2) .","title":"Windows"},{"location":"EN/dependances/#method-1-anaconda","text":"This method is simpler because you will install Anaconda which will install some of the other outbuildings (Numpy, Pandas) needed for the project. Download the latest version of Anaconda for Windows from the site . Run the .exe file, follow the instructions on the screen until the installation is complete. Then you will install the last necessary mlxtend dependency, so open an Anaconda Terminal through the Windows search tool by typing \"Anaconda Powershell Prompt\", and copy the following command: conda install mlxtend --channel conda-forge Now all the necessary dependencies are installed.","title":"Method 1: Anaconda"},{"location":"EN/dependances/#method-2-pip","text":"Check that pip is installed with the command: pip -V If it is not installed, download the python file get-pip.py . Place this python file in the installation folder, the path to this folder looks like C:\\Users\\XXX\\AppData\\Local\\Programs\\Python-38\\ Python-38 is the version of your Python, which you can find out by opening a cmd and typing the command python --version . XXX corresponds to your Windows username. Then open a cmd, and browse to this Python folder with the cd command C:\\Users\\XXXX\\AppData\\Local\\Programs\\Python-38\\ Then execute the script: python get-pip.py Et voila! pip is now installed on your system. You can check again with the command : pip -V Now you can install the outbuildings. First of all, download the zip of the project . Unzip it, open a CMD and type the following commands: cd C:\\Users\\XXX\\Documents\\Projet-Python-INSA-3A #For example, depending on where you put it, here it is in the Documents pip install -r requirements.txt Now all the necessary dependencies are installed.","title":"Method 2: pip"},{"location":"EN/dependances/#mac","text":"To install these dependencies, you will use pip a Python package manager. Install pip with the following commands: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py pip is normally installed. To check, type : pip --version Download the zip of the project at this address or with the following command: curl -LJ -o weather.zip https://github.com/AlexTheGeek/Python-Project-INSA-3A/archive/v1.zip Open a Terminal and type the following commands: unzip weather.zip cd Project-Python-3A-MRI-1 pip install -r requirements.txt Now all the necessary dependencies are installed.","title":"Mac"},{"location":"EN/dependances/#linux","text":"To install the dependencies, pip must be installed on your system : On Ubuntu to install pip, you can type the following command: sudo apt-get install python3-pip . Next you will use the pip command, but going through the apt package manager, for this you will need to type the command pip3 . curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py pip is normally installed. To check, type : pip --version Now you can install the dependencies. Download the zip of the project at this address or with the following command: curl -LJ -o weather.zip https://github.com/AlexTheGeek/Python-Project-INSA-3A/archive/v1.zip Open a Terminal and type the following commands: unzip weather.zip cd Project-Python-3A-MRI-1 pip install -r requirements.txt Now all the necessary dependencies are installed.","title":"Linux"},{"location":"EN/function/","text":"Functions In this section we will detail the parameters taken by each of the functions of each of the libraries. pandas pandas.read_csv(\u2019filepath\u2019) Reading a csv file containing comma-separated values in a DataFrame. Parameter filepath : str, path object Any path (absolute path or relative path (current directory)) or even URL is accepted. pandas.DataFrame.sample(n=None) Returns a random sample of elements from a DataFrame (object axis). Parameter n : int Number of items to be returned. Default value is 1. pandas.DataFrame.shape Returns a tuple representing the dimension of the DataFrame. pandas.DataFrame.describe(percentiles=None) Returns the value of each quartile. Parameter percentiles : number list Quartiles to be included in the output. The default value [0.25, 0.5, 0.75] representing the first quartile, median and third quartile if applicable. pandas.DataFrame.info() Displaying DataFrame information. Parameter data : DataFrame Display information about this DataFrame. pandas.DataFrame.plot(x=None, y=None, style=None) Creation of a DataFrame plot. Parameters data : DataFrame The object for which the method is called. x : str, label Label of the abscissa axis. Used only if it is a DataFrame. y : str, label Y-axis label. Used only if it is a DataFrame. style : str Style of the display of the points on the graph, by default all the points are connected. \u2018.\u2018 : dot, dot marker. \u2018o\u2018 : circle dot, circular marker. \u2018v\u2018 : low triangular point, low triangular marker. \u2018<\u2018 : left triangle point, left triangle marker. \u2018>\u2018 : right triangular point, right triangular marker. \u2018s\u2018 : square dot, square marker. kind : str, label The type of graph to be displayed. \u2018line\u2018 : line graph (default). \u2018bar\u2018 : vertical bar graph. figsize : (int, int) Size of the figure. Width, height in inches. pandas.DataFrame.values() Returns a Numpy representation of the DataFrame. pandas.DataFrame.sample(n=None) Returns a sample of n elements. Parameter n : int Number of items to be returned. pandas.DataFrame.head(n=5) Returns the first n elements. Parameter n : int Number of items to be returned. pandas.DataFrame(data=None) Returns a two-dimensional table of variable size (DataFrame). Parameter data : ndarray, DataFrame, dict The data to form the table (DataFrame) matplotlib matplotlib.pyplot.title(label) Sets the title of the chart. Parameter label : str Text used for the title. matplotlib.pyplot.xlabel(label) Sets the title of the x-axis of the graph. Parameter label : str Text used for the title of the axis. matplotlib.pyplot.ylabel(label) Sets the title of the Y-axis of the graph. Parameter label : str Text used for the title of the axis. matplotlib.pyplot.show(*, block=None) Display of all figures. Parameter block : bool default to True. If True, the main loop is stopped until all windows are closed. If it is False, all windows are opened immediately. matplotlib.pyplot.figure(num=None,figsize=None) Creation of a new figure. Parameters figsize : (float,float) default (6.4, 4.8). width, high in inch. num : int unique identifier of the figure. matplotlib.pyplot.tight_layout(pad=1.08) Adjustment of the borders between and around the underlays. Parameter pad : float default 1.08. Space between the edge of the figure and the edge of the line. matplotlib.pyplot.grid(which=\u2019ma jor\u2019,**kwargs) Define the properties of the lines in the graph. Parameters label : \u2019major\u2019, \u2019minor\u2019, \u2019both\u2019 The grid lines on which to apply the changes. **kwargs : Toutes les propri\u00e9t\u00e9s des Line2D de matplotlib linestyle : \u2019-\u2019, \u2019\u2013\u2019, \u2019-.\u2019, \u2019:\u2019 linewidth : float. color : the name of the colour. matplotlib.pyplot.scatter(x,y,c=None,**kwargs) Scatter diagram of y vs x with different colours. Parameters x : float or array-like Position of the data in x. y : float or array-like Position of the data in y. c : array-like or colour list The colour of the dots on the graph. **kargs : Additional properties color : the name of the colour. label : list or str, labels for legendary elements. matplotlib.pyplot.plot(x,y, **kwargs) Graph of y vs x. Parameters x : array-like Horizontal coordinates. y : array-like Vertical coordinates. **kwargs : All the properties of Line2D from matplotlib color : the name of the colour. matplotlib.pyplot.hist(x, bins=None, histtype=\u2019bar\u2019) Histogram graph. Parameters x : array-like Input values. bins : int Definition of the number of strips of the same width on the graph. histtype : \u2019bar\u2019, \u2019barstacked\u2019, \u2019step\u2019, \u2019stepfilled\u2019, default: \u2019bar\u2019 Type of histogram to be plotted. matplotlib.pyplot.box(x, labels=None, showmeans=None) Graphic in moustache box. Parameters x : array-like Input values. labels : sequence Label for each data set. showmeans : bool, default False Average arthimetic. seaborn searborn.displot(data=None) Adjustment of the borders between and around the underlays. Parameter data : pandas.DataFrame, numpy.ndarray Input data structure. matplotlib.pyplot.grid( args, *kwargs) Place a legend on the axes. Parameter **kwargs : All properties on the legends loc : str, position of the legend. sklearn sklearn.model_selection.train_test_split(*arrays, test_size=None, random_state=None) Divide the matrix or table into training and test subsets. Parameters *arrays : sequence of indexables with same length Allowed inputs are lists, numpy arrays, scipy-sparse matrices or pandas dataframes. test_size : float ou int If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split. If int, represents the absolute number of test samples. If None, the value is set to the complement of the train size. random_state : float ou int Controls the shuffling applied to the data before applying the split. Pass an int for reproducible output across multiple function calls. sklearn.model.linear_model.LinearRegression().fit(X,Y) Linear model training. Parameters X : array-like Training data. Y : array-like Target values. sklearn.model.linear_model.LinearRegression().fit().intercept_ Returns the intersection of the model. sklearn.model.linear_model.LinearRegression().fit().coef_ Returns the direct coefficient of the regression line. sklearn.model.linear_model.LinearRegression().fit().predict(X) Predict using the linear model. Parameter X : array-like A valuable sample. sklearn.metrics.mean_absolute_error(y_true, y_pred) Average loss by absolute error regression. Parameters y_true : array-like Basic target value. y_pred : array-like Estimated target values. sklearn.metrics.mean_squared_error(y_true, y_pred) Average loss of regression by mean squared error. Parameters y_true : array-like Basic target value. y_pred : array-like Estimated target values. sklearn.datasets.make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=2, random_state=None) Generate a random class n classification system. Parameters n_samples : int Number of samples. n_features : int The total number of elements. n_informative : int Number of information items. n_redundant : int Number of redundant elements. random_state : int Determines the generation of random numbers for the creation of a data set. sklearn.model_selection.RepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=None) Repeated Stratified K-Fold cross validator. Parameters n_splits : int Number of folds. n_repeats : int Number of times cross-validator needs to be repeated random_state : int Controls the generation of the random states for each repetition. sklearn.model_selection.cross_val_score(estimator, X, y=None, scoring=None, cv=None, n_jobs=None) Evaluate a score by cross-validation. Parameters estimator : estimator object implementing fit The object to use to fit the data. X : array-like The data to fit. y : array-like The target variable to try to predict in the case of supervised learning. scoring : str Object pointer. cv : int Determines the cross-validation splitting strategy. Specifies the number of folds in the (Stratified)KFold . n_jobs : int Number of tasks to be managed in the background/parallel. numpy numpy.sqrt(x) Returns the non-negative square root of one table per element. Parameter x : array-like, float, int Value below the square root that is required. numpy.mean(a) Returns the average of the table. Parameter a : array-like Table containing the values to be averaged. numpy.std(a) Returns the standard deviation of a table. Parameter a : array-like Table containing the values for which the standard deviation is desired. scipy scipy.stats.shapiro(x) Realization of the Shapiro-Wilk test on a data table. Returns the test statistic (float) and the p-value (float). Parameter x : array-like, float, int Data table to do the test. scipy.stats.probplot(x, plot=None) Calculate quartiles for a probability curve (by default normal probability), and possibly plot the curve. Parameters x : array-like, float, int Data table to make the graph. plot : object Plots the quantiles and least squares fit. mlxtend mlxtend.evaluate.paired_ttest_5x2cv(estimator1, estimator2, X, y, scoring=None, ran- dom_seed=None) Implements the 5x2cv twin t-test proposed by Dieterrich (1998) to compare the performance of two models. Returns the t-statistic and the p-value. Parameters estimator1 : regressor estimator2 : regressor X : array-like Training values. y : array-like Target values. scoring : str, accuracy, f1, precision, recall, roc_auc sklearn scoring metric string identifier. random_seed : int Random number for the creation of trial/train sequences. mlxtend.preprocessing.standardize(array) Standardize columns in Pandas DataFrame (Table). Parameter array : array-like Pandas DataFrame. mlxtend.feature_extraction.LinearDiscriminantAnalysis(n_discriminants=None) Linear discriminant analysis class. Parameter n_discriminants : int The number of discriminating for transformation. mlxtend.feature_extraction.LinearDiscriminantAnalysis().fit(X,y) Fit the LDA model with X. Parameters X : array-like Training values. y : array-like Target values. mlxtend.feature_extraction.LinearDiscriminantAnalysis().transform(X) Application of the linear transformation on X. Parameter X : array-like Training values.","title":"Functions"},{"location":"EN/function/#functions","text":"In this section we will detail the parameters taken by each of the functions of each of the libraries.","title":"Functions"},{"location":"EN/function/#pandas","text":"","title":"pandas"},{"location":"EN/function/#pandasread_csvfilepath","text":"Reading a csv file containing comma-separated values in a DataFrame. Parameter filepath : str, path object Any path (absolute path or relative path (current directory)) or even URL is accepted.","title":"pandas.read_csv(\u2019filepath\u2019)"},{"location":"EN/function/#pandasdataframesamplennone","text":"Returns a random sample of elements from a DataFrame (object axis). Parameter n : int Number of items to be returned. Default value is 1.","title":"pandas.DataFrame.sample(n=None)"},{"location":"EN/function/#pandasdataframeshape","text":"Returns a tuple representing the dimension of the DataFrame.","title":"pandas.DataFrame.shape"},{"location":"EN/function/#pandasdataframedescribepercentilesnone","text":"Returns the value of each quartile. Parameter percentiles : number list Quartiles to be included in the output. The default value [0.25, 0.5, 0.75] representing the first quartile, median and third quartile if applicable.","title":"pandas.DataFrame.describe(percentiles=None)"},{"location":"EN/function/#pandasdataframeinfo","text":"Displaying DataFrame information. Parameter data : DataFrame Display information about this DataFrame.","title":"pandas.DataFrame.info()"},{"location":"EN/function/#pandasdataframeplotxnone-ynone-stylenone","text":"Creation of a DataFrame plot. Parameters data : DataFrame The object for which the method is called. x : str, label Label of the abscissa axis. Used only if it is a DataFrame. y : str, label Y-axis label. Used only if it is a DataFrame. style : str Style of the display of the points on the graph, by default all the points are connected. \u2018.\u2018 : dot, dot marker. \u2018o\u2018 : circle dot, circular marker. \u2018v\u2018 : low triangular point, low triangular marker. \u2018<\u2018 : left triangle point, left triangle marker. \u2018>\u2018 : right triangular point, right triangular marker. \u2018s\u2018 : square dot, square marker. kind : str, label The type of graph to be displayed. \u2018line\u2018 : line graph (default). \u2018bar\u2018 : vertical bar graph. figsize : (int, int) Size of the figure. Width, height in inches.","title":"pandas.DataFrame.plot(x=None, y=None, style=None)"},{"location":"EN/function/#pandasdataframevalues","text":"Returns a Numpy representation of the DataFrame.","title":"pandas.DataFrame.values()"},{"location":"EN/function/#pandasdataframesamplennone_1","text":"Returns a sample of n elements. Parameter n : int Number of items to be returned.","title":"pandas.DataFrame.sample(n=None)"},{"location":"EN/function/#pandasdataframeheadn5","text":"Returns the first n elements. Parameter n : int Number of items to be returned.","title":"pandas.DataFrame.head(n=5)"},{"location":"EN/function/#pandasdataframedatanone","text":"Returns a two-dimensional table of variable size (DataFrame). Parameter data : ndarray, DataFrame, dict The data to form the table (DataFrame)","title":"pandas.DataFrame(data=None)"},{"location":"EN/function/#matplotlib","text":"","title":"matplotlib"},{"location":"EN/function/#matplotlibpyplottitlelabel","text":"Sets the title of the chart. Parameter label : str Text used for the title.","title":"matplotlib.pyplot.title(label)"},{"location":"EN/function/#matplotlibpyplotxlabellabel","text":"Sets the title of the x-axis of the graph. Parameter label : str Text used for the title of the axis.","title":"matplotlib.pyplot.xlabel(label)"},{"location":"EN/function/#matplotlibpyplotylabellabel","text":"Sets the title of the Y-axis of the graph. Parameter label : str Text used for the title of the axis.","title":"matplotlib.pyplot.ylabel(label)"},{"location":"EN/function/#matplotlibpyplotshow-blocknone","text":"Display of all figures. Parameter block : bool default to True. If True, the main loop is stopped until all windows are closed. If it is False, all windows are opened immediately.","title":"matplotlib.pyplot.show(*, block=None)"},{"location":"EN/function/#matplotlibpyplotfigurenumnonefigsizenone","text":"Creation of a new figure. Parameters figsize : (float,float) default (6.4, 4.8). width, high in inch. num : int unique identifier of the figure.","title":"matplotlib.pyplot.figure(num=None,figsize=None)"},{"location":"EN/function/#matplotlibpyplottight_layoutpad108","text":"Adjustment of the borders between and around the underlays. Parameter pad : float default 1.08. Space between the edge of the figure and the edge of the line.","title":"matplotlib.pyplot.tight_layout(pad=1.08)"},{"location":"EN/function/#matplotlibpyplotgridwhichma-jorkwargs","text":"Define the properties of the lines in the graph. Parameters label : \u2019major\u2019, \u2019minor\u2019, \u2019both\u2019 The grid lines on which to apply the changes. **kwargs : Toutes les propri\u00e9t\u00e9s des Line2D de matplotlib linestyle : \u2019-\u2019, \u2019\u2013\u2019, \u2019-.\u2019, \u2019:\u2019 linewidth : float. color : the name of the colour.","title":"matplotlib.pyplot.grid(which=\u2019ma jor\u2019,**kwargs)"},{"location":"EN/function/#matplotlibpyplotscatterxycnonekwargs","text":"Scatter diagram of y vs x with different colours. Parameters x : float or array-like Position of the data in x. y : float or array-like Position of the data in y. c : array-like or colour list The colour of the dots on the graph. **kargs : Additional properties color : the name of the colour. label : list or str, labels for legendary elements.","title":"matplotlib.pyplot.scatter(x,y,c=None,**kwargs)"},{"location":"EN/function/#matplotlibpyplotplotxy-kwargs","text":"Graph of y vs x. Parameters x : array-like Horizontal coordinates. y : array-like Vertical coordinates. **kwargs : All the properties of Line2D from matplotlib color : the name of the colour.","title":"matplotlib.pyplot.plot(x,y, **kwargs)"},{"location":"EN/function/#matplotlibpyplothistx-binsnone-histtypebar","text":"Histogram graph. Parameters x : array-like Input values. bins : int Definition of the number of strips of the same width on the graph. histtype : \u2019bar\u2019, \u2019barstacked\u2019, \u2019step\u2019, \u2019stepfilled\u2019, default: \u2019bar\u2019 Type of histogram to be plotted.","title":"matplotlib.pyplot.hist(x, bins=None, histtype=\u2019bar\u2019)"},{"location":"EN/function/#matplotlibpyplotboxx-labelsnone-showmeansnone","text":"Graphic in moustache box. Parameters x : array-like Input values. labels : sequence Label for each data set. showmeans : bool, default False Average arthimetic.","title":"matplotlib.pyplot.box(x, labels=None, showmeans=None)"},{"location":"EN/function/#seaborn","text":"","title":"seaborn"},{"location":"EN/function/#searborndisplotdatanone","text":"Adjustment of the borders between and around the underlays. Parameter data : pandas.DataFrame, numpy.ndarray Input data structure.","title":"searborn.displot(data=None)"},{"location":"EN/function/#matplotlibpyplotgridargskwargs","text":"Place a legend on the axes. Parameter **kwargs : All properties on the legends loc : str, position of the legend.","title":"matplotlib.pyplot.grid(args,*kwargs)"},{"location":"EN/function/#sklearn","text":"","title":"sklearn"},{"location":"EN/function/#sklearnmodel_selectiontrain_test_splitarrays-test_sizenone-random_statenone","text":"Divide the matrix or table into training and test subsets. Parameters *arrays : sequence of indexables with same length Allowed inputs are lists, numpy arrays, scipy-sparse matrices or pandas dataframes. test_size : float ou int If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split. If int, represents the absolute number of test samples. If None, the value is set to the complement of the train size. random_state : float ou int Controls the shuffling applied to the data before applying the split. Pass an int for reproducible output across multiple function calls.","title":"sklearn.model_selection.train_test_split(*arrays, test_size=None, random_state=None)"},{"location":"EN/function/#sklearnmodellinear_modellinearregressionfitxy","text":"Linear model training. Parameters X : array-like Training data. Y : array-like Target values.","title":"sklearn.model.linear_model.LinearRegression().fit(X,Y)"},{"location":"EN/function/#sklearnmodellinear_modellinearregressionfitintercept_","text":"Returns the intersection of the model.","title":"sklearn.model.linear_model.LinearRegression().fit().intercept_"},{"location":"EN/function/#sklearnmodellinear_modellinearregressionfitcoef_","text":"Returns the direct coefficient of the regression line.","title":"sklearn.model.linear_model.LinearRegression().fit().coef_"},{"location":"EN/function/#sklearnmodellinear_modellinearregressionfitpredictx","text":"Predict using the linear model. Parameter X : array-like A valuable sample.","title":"sklearn.model.linear_model.LinearRegression().fit().predict(X)"},{"location":"EN/function/#sklearnmetricsmean_absolute_errory_true-y_pred","text":"Average loss by absolute error regression. Parameters y_true : array-like Basic target value. y_pred : array-like Estimated target values.","title":"sklearn.metrics.mean_absolute_error(y_true, y_pred)"},{"location":"EN/function/#sklearnmetricsmean_squared_errory_true-y_pred","text":"Average loss of regression by mean squared error. Parameters y_true : array-like Basic target value. y_pred : array-like Estimated target values.","title":"sklearn.metrics.mean_squared_error(y_true, y_pred)"},{"location":"EN/function/#sklearndatasetsmake_classificationn_samples100-n_features20-n_informative2-n_redundant2-random_statenone","text":"Generate a random class n classification system. Parameters n_samples : int Number of samples. n_features : int The total number of elements. n_informative : int Number of information items. n_redundant : int Number of redundant elements. random_state : int Determines the generation of random numbers for the creation of a data set.","title":"sklearn.datasets.make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=2, random_state=None)"},{"location":"EN/function/#sklearnmodel_selectionrepeatedstratifiedkfoldn_splits5-n_repeats10-random_statenone","text":"Repeated Stratified K-Fold cross validator. Parameters n_splits : int Number of folds. n_repeats : int Number of times cross-validator needs to be repeated random_state : int Controls the generation of the random states for each repetition.","title":"sklearn.model_selection.RepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=None)"},{"location":"EN/function/#sklearnmodel_selectioncross_val_scoreestimator-x-ynone-scoringnone-cvnone-n_jobsnone","text":"Evaluate a score by cross-validation. Parameters estimator : estimator object implementing fit The object to use to fit the data. X : array-like The data to fit. y : array-like The target variable to try to predict in the case of supervised learning. scoring : str Object pointer. cv : int Determines the cross-validation splitting strategy. Specifies the number of folds in the (Stratified)KFold . n_jobs : int Number of tasks to be managed in the background/parallel.","title":"sklearn.model_selection.cross_val_score(estimator, X, y=None, scoring=None, cv=None, n_jobs=None)"},{"location":"EN/function/#numpy","text":"","title":"numpy"},{"location":"EN/function/#numpysqrtx","text":"Returns the non-negative square root of one table per element. Parameter x : array-like, float, int Value below the square root that is required.","title":"numpy.sqrt(x)"},{"location":"EN/function/#numpymeana","text":"Returns the average of the table. Parameter a : array-like Table containing the values to be averaged.","title":"numpy.mean(a)"},{"location":"EN/function/#numpystda","text":"Returns the standard deviation of a table. Parameter a : array-like Table containing the values for which the standard deviation is desired.","title":"numpy.std(a)"},{"location":"EN/function/#scipy","text":"","title":"scipy"},{"location":"EN/function/#scipystatsshapirox","text":"Realization of the Shapiro-Wilk test on a data table. Returns the test statistic (float) and the p-value (float). Parameter x : array-like, float, int Data table to do the test.","title":"scipy.stats.shapiro(x)"},{"location":"EN/function/#scipystatsprobplotx-plotnone","text":"Calculate quartiles for a probability curve (by default normal probability), and possibly plot the curve. Parameters x : array-like, float, int Data table to make the graph. plot : object Plots the quantiles and least squares fit.","title":"scipy.stats.probplot(x, plot=None)"},{"location":"EN/function/#mlxtend","text":"","title":"mlxtend"},{"location":"EN/function/#mlxtendevaluatepaired_ttest_5x2cvestimator1-estimator2-x-y-scoringnone-ran-dom_seednone","text":"Implements the 5x2cv twin t-test proposed by Dieterrich (1998) to compare the performance of two models. Returns the t-statistic and the p-value. Parameters estimator1 : regressor estimator2 : regressor X : array-like Training values. y : array-like Target values. scoring : str, accuracy, f1, precision, recall, roc_auc sklearn scoring metric string identifier. random_seed : int Random number for the creation of trial/train sequences.","title":"mlxtend.evaluate.paired_ttest_5x2cv(estimator1, estimator2, X, y, scoring=None, ran- dom_seed=None)"},{"location":"EN/function/#mlxtendpreprocessingstandardizearray","text":"Standardize columns in Pandas DataFrame (Table). Parameter array : array-like Pandas DataFrame.","title":"mlxtend.preprocessing.standardize(array)"},{"location":"EN/function/#mlxtendfeature_extractionlineardiscriminantanalysisn_discriminantsnone","text":"Linear discriminant analysis class. Parameter n_discriminants : int The number of discriminating for transformation.","title":"mlxtend.feature_extraction.LinearDiscriminantAnalysis(n_discriminants=None)"},{"location":"EN/function/#mlxtendfeature_extractionlineardiscriminantanalysisfitxy","text":"Fit the LDA model with X. Parameters X : array-like Training values. y : array-like Target values.","title":"mlxtend.feature_extraction.LinearDiscriminantAnalysis().fit(X,y)"},{"location":"EN/function/#mlxtendfeature_extractionlineardiscriminantanalysistransformx","text":"Application of the linear transformation on X. Parameter X : array-like Training values.","title":"mlxtend.feature_extraction.LinearDiscriminantAnalysis().transform(X)"},{"location":"EN/ide/","text":"Installing an IDE You can install one of the two following IDE (Integrated Development Environment) for the rest of the project. Visual Studio Code is an IDE available on Mac, Windows and Linux while Spyder IDE is only available on Mac and Windows. Visual Studio Code Windows - Mac Download the .exe (Windows) or .dmg (Mac) file available on the Visual Studio Code page. Then you just have to execute the .exe file downloaded previously. Follow the instructions on the screen to install it. Once installed you can launch it and start coding. Linux - Ubuntu, Debian Download the .deb file available on the Visual Studio Code page. Then, open a Terminal, navigate to the folder where the deb file has been downloaded (with the cd command) and type the following command : sudo dpkg -i package_name_deb.deb #Replace package_name_deb.deb with your package name Spyder IDE Python (Windows - Mac) Download the .exe (Windows) or .dmg (Mac) file available on the Spyder IDE page. Then simply run the previously downloaded .exe file. Follow the on-screen instructions to install it. Once installed you can launch it and start coding.","title":"IDE"},{"location":"EN/ide/#installing-an-ide","text":"You can install one of the two following IDE (Integrated Development Environment) for the rest of the project. Visual Studio Code is an IDE available on Mac, Windows and Linux while Spyder IDE is only available on Mac and Windows.","title":"Installing an IDE"},{"location":"EN/ide/#visual-studio-code","text":"","title":"Visual Studio Code"},{"location":"EN/ide/#windows-mac","text":"Download the .exe (Windows) or .dmg (Mac) file available on the Visual Studio Code page. Then you just have to execute the .exe file downloaded previously. Follow the instructions on the screen to install it. Once installed you can launch it and start coding.","title":"Windows - Mac"},{"location":"EN/ide/#linux-ubuntu-debian","text":"Download the .deb file available on the Visual Studio Code page. Then, open a Terminal, navigate to the folder where the deb file has been downloaded (with the cd command) and type the following command : sudo dpkg -i package_name_deb.deb #Replace package_name_deb.deb with your package name","title":"Linux - Ubuntu, Debian"},{"location":"EN/ide/#spyder-ide-python-windows-mac","text":"Download the .exe (Windows) or .dmg (Mac) file available on the Spyder IDE page. Then simply run the previously downloaded .exe file. Follow the on-screen instructions to install it. Once installed you can launch it and start coding.","title":"Spyder IDE Python (Windows - Mac)"},{"location":"EN/launch/","text":"The program Lauch To start the programme, just go to the folder where the file main.py is located, so you can start the programme with the following command: python3 main.py The programme will display information in the Terminal and also through windows created by matplotlib. To move forward in the programme, simply close each window of the representations that appear on the screen. Example of programme launch You will find for each operating system a video presentation of the programme during its running. Windows 10 MacOS Linux (Ubuntu)","title":"The program"},{"location":"EN/launch/#the-program","text":"","title":"The program"},{"location":"EN/launch/#lauch","text":"To start the programme, just go to the folder where the file main.py is located, so you can start the programme with the following command: python3 main.py The programme will display information in the Terminal and also through windows created by matplotlib. To move forward in the programme, simply close each window of the representations that appear on the screen.","title":"Lauch"},{"location":"EN/launch/#example-of-programme-launch","text":"You will find for each operating system a video presentation of the programme during its running.","title":"Example of programme launch"},{"location":"EN/launch/#windows-10","text":"","title":"Windows 10"},{"location":"EN/launch/#macos","text":"","title":"MacOS"},{"location":"EN/launch/#linux-ubuntu","text":"","title":"Linux (Ubuntu)"},{"location":"EN/objectif/","text":"Objectives Python is a very popular programming language in the IT world for carrying out various tasks such as automation, websites, Artificial Intelligence (AI), etc. Our objective is to understand the given code in detail but also to simplify it, keeping only the dependencies useful for the project. This will enable us to produce clear documentation to use the script on a new computer and by a person not necessarily trained for its use. In a second step, we will be able to extend this code to the databases available on the kaggle site .","title":"Objectives"},{"location":"EN/objectif/#objectives","text":"Python is a very popular programming language in the IT world for carrying out various tasks such as automation, websites, Artificial Intelligence (AI), etc. Our objective is to understand the given code in detail but also to simplify it, keeping only the dependencies useful for the project. This will enable us to produce clear documentation to use the script on a new computer and by a person not necessarily trained for its use. In a second step, we will be able to extend this code to the databases available on the kaggle site .","title":"Objectives"},{"location":"EN/python/","text":"Installing Python This project runs on a Python environment, and preferably on Python 3.8.0 (verified version for this project). Windows Download the executable file from the official Python website for Python 3.8.0. Run the .exe file. Start by checking the two boxes at the bottom of the first dialog window, as shown in the following image. Go to the Advanced Options , check all the boxes, allowing you to install pip (a useful package manager later on), then go back and forward until the installation is complete. At the end of the runtime, Python is completely installed on your system. To verify that Python is installed, open a CMD and type the following command: python --version #You should get the following result Python 3.8.0 Mac There are two methods available to you, either through the official website (simple method) , or in command line with Homebrew . 1st method: Official Website Download the package on the official Python website of the Python 3.8.0 version. Run the .pkg file and follow the different steps on the screen. At the end of the execution, Python is completely installed on your system. To verify that Python is installed, open a Terminal and type the following command: python --version #You should get the following result Python 3.8.0 2nd method: Homebrew To install Homebrew, open a Terminal and type the command : /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" Then install Python with the following command: brew install python@3.8 At the end of the runtime, Python is completely installed on your system. To verify that Python is installed, open a Terminal and type the following command: python --version #You should get the following result Python 3.8.0 Linux In a Terminal, type the following command: sudo apt-get install python3.8 To check that Python is installed, type the following command: python --version #You should get the following result Python 3.8.0","title":"Python"},{"location":"EN/python/#installing-python","text":"This project runs on a Python environment, and preferably on Python 3.8.0 (verified version for this project).","title":"Installing Python"},{"location":"EN/python/#windows","text":"Download the executable file from the official Python website for Python 3.8.0. Run the .exe file. Start by checking the two boxes at the bottom of the first dialog window, as shown in the following image. Go to the Advanced Options , check all the boxes, allowing you to install pip (a useful package manager later on), then go back and forward until the installation is complete. At the end of the runtime, Python is completely installed on your system. To verify that Python is installed, open a CMD and type the following command: python --version #You should get the following result Python 3.8.0","title":"Windows"},{"location":"EN/python/#mac","text":"There are two methods available to you, either through the official website (simple method) , or in command line with Homebrew .","title":"Mac"},{"location":"EN/python/#1st-method-official-website","text":"Download the package on the official Python website of the Python 3.8.0 version. Run the .pkg file and follow the different steps on the screen. At the end of the execution, Python is completely installed on your system. To verify that Python is installed, open a Terminal and type the following command: python --version #You should get the following result Python 3.8.0","title":"1st method: Official Website"},{"location":"EN/python/#2nd-method-homebrew","text":"To install Homebrew, open a Terminal and type the command : /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" Then install Python with the following command: brew install python@3.8 At the end of the runtime, Python is completely installed on your system. To verify that Python is installed, open a Terminal and type the following command: python --version #You should get the following result Python 3.8.0","title":"2nd method: Homebrew"},{"location":"EN/python/#linux","text":"In a Terminal, type the following command: sudo apt-get install python3.8 To check that Python is installed, type the following command: python --version #You should get the following result Python 3.8.0","title":"Linux"},{"location":"EN/sources/","text":"Sources Find the official documentation of the libraries used in this project: - pandas - matplotlib - seaborn - numpy - mlxtend","title":"Sources"},{"location":"EN/sources/#sources","text":"Find the official documentation of the libraries used in this project: - pandas - matplotlib - seaborn - numpy - mlxtend","title":"Sources"},{"location":"FR/","text":"Documentation fran\u00e7aise du projet python Sommaire Objectifs Installation de Python Windows Mac 1\u00e8re m\u00e9thode : Site Officiel 2\u00e8me m\u00e9thode : Homebrew Linux Installation d'un IDE Visual Studio Code Windows - Mac Linux - Ubuntu, Debian Spyder IDE Python (Windows - Mac) Installation des d\u00e9pendances Windows M\u00e9thode 1 : Anaconda M\u00e9thode 2 : pip Mac Linux Le programme Lancement Exemple de lancement du programme Windows 10 MacOS Linux (Ubuntu) Explications du code Bloc 1 : initialisation d'un DataFrame \u00e0 partir d'un fichier csv Bloc 2 : graphique en nuage de points de la r\u00e9partition des temp\u00e9ratures Bloc 3 : graphique en histogramme de la r\u00e9partition des temp\u00e9ratures Max Bloc 4 : initialisation de la pr\u00e9diction Bloc 5 : graphique \u00e0 barres verticales de la r\u00e9partition des valeurs pr\u00e9dites et mesur\u00e9es Bloc 6 : graphique de la droite de r\u00e9gression Bloc 7 : Quelques valeurs de la pr\u00e9diction Bloc 8 : Statistique d'un tableau de moyenne Bloc de la fonction associ\u00e9e Bloc 9 : diagramme en escalier Bloc 10 : test de Shapiro-Wilk Bloc 11 : boite \u00e0 moustaches Bloc 12 : courbe de probabilit\u00e9 Bloc 13 : coefficient de r\u00e9gression Bloc 14 : diagramme boite \u00e0 moustaches Bloc 15 : test entre les deux mod\u00e8les Bloc 16 : discriminant Les fonctions pandas matplotlib seaborn sklearn numpy scipy mlxtend Sources","title":"Accueil"},{"location":"FR/#documentation-francaise-du-projet-python","text":"","title":"Documentation fran\u00e7aise du projet python"},{"location":"FR/#sommaire","text":"Objectifs Installation de Python Windows Mac 1\u00e8re m\u00e9thode : Site Officiel 2\u00e8me m\u00e9thode : Homebrew Linux Installation d'un IDE Visual Studio Code Windows - Mac Linux - Ubuntu, Debian Spyder IDE Python (Windows - Mac) Installation des d\u00e9pendances Windows M\u00e9thode 1 : Anaconda M\u00e9thode 2 : pip Mac Linux Le programme Lancement Exemple de lancement du programme Windows 10 MacOS Linux (Ubuntu) Explications du code Bloc 1 : initialisation d'un DataFrame \u00e0 partir d'un fichier csv Bloc 2 : graphique en nuage de points de la r\u00e9partition des temp\u00e9ratures Bloc 3 : graphique en histogramme de la r\u00e9partition des temp\u00e9ratures Max Bloc 4 : initialisation de la pr\u00e9diction Bloc 5 : graphique \u00e0 barres verticales de la r\u00e9partition des valeurs pr\u00e9dites et mesur\u00e9es Bloc 6 : graphique de la droite de r\u00e9gression Bloc 7 : Quelques valeurs de la pr\u00e9diction Bloc 8 : Statistique d'un tableau de moyenne Bloc de la fonction associ\u00e9e Bloc 9 : diagramme en escalier Bloc 10 : test de Shapiro-Wilk Bloc 11 : boite \u00e0 moustaches Bloc 12 : courbe de probabilit\u00e9 Bloc 13 : coefficient de r\u00e9gression Bloc 14 : diagramme boite \u00e0 moustaches Bloc 15 : test entre les deux mod\u00e8les Bloc 16 : discriminant Les fonctions pandas matplotlib seaborn sklearn numpy scipy mlxtend Sources","title":"Sommaire"},{"location":"FR/code/","text":"Explication du code Dans cette partie nous allons expliquer les diff\u00e9rentes actions faites par le programmes, par des blocs de lignes de code. Pour pr\u00e9senterons ainsi une sortie possible gr\u00e2ce \u00e0 ces lignes. Vous pouvez aussi retrouver le code complet annot\u00e9 \u00e0 \u00e0 cette adresse pour le main et la fonction . Tout d'abord notre programme est compos\u00e9 de deux scripts Python : - main.py : contenant le corps du programme (script python \u00e0 ex\u00e9cuter pour lancer le programme) - function.py : contenant la fonction utilis\u00e9 dans main.py Bloc 1 : initialisation d'un DataFrame \u00e0 partir d'un fichier csv R\u00e9cup\u00e9ration des donn\u00e9es s\u00e9par\u00e9es par des virgules \u00e0 partir d'un fichier csv pour g\u00e9n\u00e9rer un \u00e9chantillon de mani\u00e8re al\u00e9atoire, et ainsi afficher des informations sur ce DataFrame (dimension, statistique, utilisation m\u00e9moire, valeurs non nulles, colonnes, index dtype, ...). dataset1 = pd.read_csv('weather.csv') #Lecture d'un fichier (csv) de valeurs s\u00e9par\u00e9es par des virgules dans un DataFrame dataset1.sample() #G\u00e9n\u00e9ration d'un \u00e9chantillon al\u00e9atoire de chaque groupe d'un objet du DataFrame dataset=dataset1.sample(1000) #Un nouvel DataFrame (dataset) contenant 1000 \u00e9l\u00e8ments \u00e9chantillonn\u00e9s de fa\u00e7on al\u00e9atoire \u00e0 partir de dataset1 print(dataset.shape) #Affichage d'un tuple repr\u00e9sentant la dimension du DataFrame dataset print(dataset.describe()) #Affichage des statistiques pour chaque type de valeurs du DataFrame dataset.info() #Affichage des informations sur le DataFrame, notamment l'index dtype, les colonnnes et les valeurs non nulles et l'utilisation de la m\u00e9moire Sortie possible : Bloc 2 : graphique en nuage de points de la r\u00e9partition des temp\u00e9ratures Affichage de la r\u00e9partition des temp\u00e9ratures en fonction des temp\u00e9ratures minimales et temp\u00e9ratures maximales, dans un graphique en nuage de points. dataset.plot(x='Temp_Min', y='Temp_Max', style='o') #Cr\u00e9ation d'un trac\u00e9 de DataFrame, avec l'axe x repr\u00e9sentant les Temp_min et l'axe y repr\u00e9sentant les Temp_Max, dans un style de nuage de points plt.title('Temp_Min vs Temp_Max') #Param\u00e9trage du titre du graphique plt.xlabel('Temp_Min') #Param\u00e9trage du titre de l'axe x plt.ylabel('Temp_Max') #Param\u00e9trage du titre de l'axe y plt.show() #Affichage du graphique/figure Sortie possible : Bloc 3 : graphique en histogramme de la r\u00e9partition des temp\u00e9ratures Max Cr\u00e9ation d'un graphique histogramme pour visualiser la r\u00e9partion des valeurs de Temp_Max du DataFrame. plt.figure(figsize=(15,10)) #Cr\u00e9ation d'une figure de taille d\u00e9finie par figsize en inch, 15 inch de largeur et 10 de hauteur plt.tight_layout() #Ajustement des bordures entre et autour des sous traces seabornInstance.distplot(dataset['Temp_Max']) #Permet de dessiner un trac\u00e9 de distribution sur une FacetGrid, permettant de visualiser les donn\u00e9es de DataFrame des Temp_Max dans un format d'histogramme (par d\u00e9faut) plt.show() #Affichage du graphique/figure Sortie possible : Bloc 4 : initialisation de la pr\u00e9diction Pr\u00e9diction des Temp_Max \u00e0 partir du fichier pr\u00e9c\u00e8dent. X = dataset['Temp_Min'].values.reshape(-1,1) #La valeur X inclut l'attribut Temp_Min y = dataset['Temp_Max'].values.reshape(-1,1) #La valeur y inclut l'attribut Temp_Max X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) #Attribution de 80% des donn\u00e9es \u00e0 l'ensemble de formation et le reste \u00e0 l'ensemble de test reg = LinearRegression().fit(X_train, y_train) #Entrainement du mod\u00e9le en utilisant l'ensemble de formation print(reg.intercept_) #Affichage de l'intersection print(reg.coef_) #Affichage du coefficient directeur de la droite de r\u00e9gression y_pred = reg.predict(X_test) #Utilisation des donn\u00e9es de test pour faire des pr\u00e9dictions sur le Temp_Max df = pd.DataFrame({'Actuelle(Mesur\u00e9es)': y_test.flatten(), 'Pr\u00e9diction(mod\u00e8le)': y_pred.flatten()}) #Construction d'un DataFrame \u00e0 partir des donn\u00e9es pr\u00e9dites et de tests print(df) #Affichage de DataFrame Sortie possible : Bloc 5 : graphique \u00e0 barres verticales de la r\u00e9partition des valeurs pr\u00e9dites et mesur\u00e9es Cr\u00e9ation du graphique \u00e0 barres verticales montrant la r\u00e9partitions des temp\u00e9ratures mesur\u00e9es et pr\u00e9dites. df1 = df.head(25) #R\u00e9cup\u00e9ration des 25 premi\u00e8res lignes de df pour les mettre dans df1 df1.plot(kind='bar',figsize=(16,10)) #Cr\u00e9ation de DataFrame, de taille 16inch de largeur et 10inch de hauteur, et le style du graphique sera des barres verticales plt.grid(which='major', linestyle='-', linewidth='0.5', color='green') #Cr\u00e9ation de la grille interne (major) du graphique avec un style de trait plein, \u00e9paisseur de 0.5points, une couleur verte plt.grid(which='minor', linestyle=':', linewidth='0.5', color='black') #Cr\u00e9ation du cadre (minor) du graphique avec un style de trait \u00e0 point, \u00e9paisseur de 0.5points, une couleur noire plt.show() #Affichage du graphique/figure Sortie possible : Bloc 6 : graphique de la droite de r\u00e9gression Cr\u00e9ation d'un graphique de dispersion en gris avec la droite de r\u00e9gression en rouge calcul\u00e9e pr\u00e9c\u00e8demment plt.title('Mod\u00e8le ax+y') #Param\u00e9trage du titre du graphique plt.xlabel('Temp_Min') #Param\u00e9trage du titre de l'axe x plt.ylabel('Temp_Max') #Param\u00e9trage du titre de l'axe y plt.scatter(X_test, y_test, color='gray') #Cr\u00e9ation d'un diagramme de dispersion y_test par rapport \u00e0 X_test de couleur grise plt.plot(X_test, y_pred, color='red', linewidth=2) #Cr\u00e9ation d'un trac\u00e9 (de la fonction ax+y) de DataFrame, avec l'axe x repr\u00e9sentant les X_Test et l'axe y repr\u00e9sentant les y_pred, dans la couleur rouge et de largeur 2points plt.show() #Affichage du graphique/figure Sortie possible : Bloc 7 : quelques valeurs de la pr\u00e9diction Affiche des valeurs en fonction des pr\u00e9dictions print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred)) #Affichage du calcul des valeurs absolues moyennes des erreurs print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred)) #Affichage du calcul de la moyenne des erreurs au carr\u00e9 print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred))) #Affichage du calcul de la racine carr\u00e9e de la moyenne des erreurs quadratiques Sortie possible : Bloc 8 : statistique d'un tableau de moyenne Ajout des valeurs moyennes dans un tableau et affichage de ce tableau et des valeurs moyennes et \u00e9cart-type. Means = [] #Cr\u00e9ation d'un tableau vide des valeurs moyennes Means=testSamples(200, 100,dataset['Temp_Min']) #Ajout des valeurs moyennes dans le tableau avec la fonction testSamples cr\u00e9\u00e9e pr\u00e9c\u00e9demment print(Means) #Affichage du tableau des valeurs moyennes print(np.mean(Means)) #Affichage de la moyenne du tableau Means print(np.mean(dataset['Temp_Min'])) #Affichage de la moyenne du tableau dataset['Temp_Min'] print(np.std(Means)) #Affiche l'\u00e9cart-type des valeurs du tableau Means print(np.std(dataset['Temp_Min'])) #Affiche l'\u00e9cart-type des valeurs du tableau dataset['Temp_Min'] Bloc de la fonction associ\u00e9e La fonction testSamples permet de cr\u00e9er des valeurs \u00e0 partir d'un \u00e9chantillon et ainsi de les ins\u00e9rer dans un tableau. class fonction: #Cr\u00e9ation de la classe fonction pour toutes les fonctions utilisables pour temp.py def testSamples(numTrials, sampleSize, data): #D\u00e9finition de la fonction testSamples prenant en param\u00e8tre numTrials (int), sampleSize (int), data (tableau de float) Means = [] #Cr\u00e9ation d'un tableau vide for t in range(numTrials): #Boucle for commen\u00e7ant de 0 allant \u00e0 numTrials-1 par pas de 1 Y=data.sample(sampleSize) #Y r\u00e9cup\u00e8re un \u00e9chantillon al\u00e9atoire d'\u00e9l\u00e9ments de taille sampleSize Means.append(sum(Y)/len(Y)) #Ajout dans le tabelau de la division de la somme de Y divis\u00e9 par la longueur de Y return Means #On retourne le tableau Means Sortie possible : Bloc 9 : diagramme en escalier Cr\u00e9ation d'un histogramme en escalier. plt.figure(1) #Cr\u00e9ation d'une figure avec un unique identifiant \u00e9gal \u00e0 1 plt.hist(Means, bins=10, histtype='step') #Cr\u00e9ation d'un histogramme en escalier avec un seul trait et sans remplissage, avec 10 marches ayant la m\u00eame largeur plt.show() #Affichage du graphique/figure Sortie possible : Bloc 10 : test de Shapiro-Wilk Test de Shapiro-Wilk sur une population distribu\u00e9e normalement. stat, p = stats.shapiro(Means) #On fait le test de Shapiro-Wilk qui v\u00e9rifie l\u2019hypoth\u00e8se nulle selon les donn\u00e9es de Means, et retourne la valeur de la statistique du test et la p-value pour l'hypoth\u00e8se du test print('Statistics={}, p={}'.format(stat, p)) #Affichage de la statistique et de la p-value alpha = 0.05 #Iniatialisation de alpha if p > alpha: #Test entre p-value et alpha print('Sample looks Normal (do not reject H0)') #Affichage si p-value > alpha else: print('Sample does not look Normal (reject H0)') #Affichage si p-value < alpha Sortie possible : Bloc 11 : boite \u00e0 moustaches Diagramme en boites et \u00e0 moutaches. La bo\u00eete s'\u00e9tend des valeurs du quartile inf\u00e9rieur au quartile sup\u00e9rieur des donn\u00e9es, avec une ligne \u00e0 la m\u00e9diane. Les moustaches s'\u00e9tendent \u00e0 partir de la bo\u00eete pour montrer l'\u00e9tendue des donn\u00e9es. Les points de vol sont ceux qui se trouvent apr\u00e8s l'extr\u00e9mit\u00e9 des moustaches. plt.boxplot(Means) #Cr\u00e9ation d'un diagramme en boites et \u00e0 moustaches de Means plt.show() #Affichage du graphique/figure Sortie possible : Bloc 12 : courbe de probabilit\u00e9 Cr\u00e9ation et affichage de la courbe de probabilit\u00e9 stats.probplot(Means, plot=plt) #Calcule les quantiles de la courbe de probabilit\u00e9 normale de Means et la trace avec matplotlib plt.show() #Affichage du graphique/figure Sortie possible : Bloc 13 : coefficient de r\u00e9gression Ecriture par deux mani\u00e8res diff\u00e9rentes du calcul du coefficient de r\u00e9gression lin\u00e9aire. X, y = make_classification(n_samples=100, n_features=10, n_informative=10, n_redundant=0, random_state=1) #Param\u00e8trage du nuage de points model1 = LogisticRegression() #Initialisation de l'\u00e9valuation du mod\u00e8le 1 par la fonction LogisticRegression() cv1 = RepeatedStratifiedKFold(n_splits=2, n_repeats=5, random_state=1) #Param\u00e9trage de la variable cv1 scores1 = cross_val_score(model1, X, y, scoring='accuracy', cv=cv1, n_jobs=-1) #Param\u00e9trage de la variable scores1 print('LogisticRegression Mean Accuracy: %.3f (%.3f)' % (np.mean(scores1), np.std(scores1))) #Affichage du coefficient de r\u00e9gression lin\u00e9aire moyen pour le mod\u00e8le 1 model2 = LinearDiscriminantAnalysis() #Initialisation de l'\u00e9valuation du mod\u00e8le 2 par la fonction cv2 = RepeatedStratifiedKFold(n_splits=2, n_repeats=5, random_state=1) #Param\u00e9trage de la variable cv2 scores2 = cross_val_score(model2, X, y, scoring='accuracy', cv=cv2, n_jobs=-1) #Param\u00e9trage de la variable scores2 print('LinearDiscriminantAnalysis Mean Accuracy: %.3f (%.3f)' % (np.mean(scores2), np.std(scores2))) #Affichage du coefficient de r\u00e9gression lin\u00e9aire moyen pour le mod\u00e8le 2 Sortie possible : Bloc 14 : diagramme boite \u00e0 moustaches Cr\u00e9ation du diagramme boite \u00e0 moustaches plt.boxplot([scores1, scores2], labels=['LR', 'LDA'], showmeans=True) #Cr\u00e9ation d'un diagramme boite \u00e0 moustaches \u00e0 partir de scores1 et scores2 plt.show() #Affichage du graphique/figure Sortie possible : Bloc 15 : test entre les deux mod\u00e8les D\u00e9termination de la P-value et de T-stastitic pour faire un test entre les deux mod\u00e8les t, p = paired_ttest_5x2cv(estimator1=model1, estimator2=model2, X=X, y=y, scoring='accuracy', random_seed=1) #Initialisation du couple de valeurs t et p print('P-value: %.3f, t-Statistic: %.3f' % (p, t)) #Affichage de la p-Value et de t-Statistic initialis\u00e9es ci-dessus if p <= 0.05: #Test de la valeur de la variable p print('Difference between mean performance is probably real') #Affichage si p<=0.05 else: print('Algorithms probably have the same performance') #Affichage si p>0.05 Sortie possible : Bloc 16 : discriminant Analyse du discriminant X = standardize(X) #Lissage de la variable X lda = ldaf(n_discriminants=2) #Initialisation du discriminant lda.fit(X, y) #Entrainement du mod\u00e8le en utilisant l'ensemble de formation X_lda = lda.transform(X) #Transforme les valeurs pour qu'elles soient utilisables par les fonctions d'apr\u00e8s plt.figure(figsize=(6, 4)) #Cr\u00e9ation d'une figure avec une certaine taille pr\u00e9cis\u00e9e en argument for lab, col in zip((0, 1),('blue', 'red')): #Boucle pour tracer le nuage de points en fonction de la ligne et de la colonne plt.scatter(X_lda[y == lab, 0],X_lda[y == lab, 1],label=lab,c=col) #Tra\u00e7age du nuage de points plt.xlabel('Linear Discriminant 1') #Param\u00e8trage du titre de l'axe X plt.ylabel('Linear Discriminant 2') #Param\u00e8trage du titre de l'axe Y plt.legend(loc='lower right') #Param\u00e8trage de la l\u00e9gende situ\u00e9e en bas \u00e0 droite plt.tight_layout() #Ajustement des bordures entre et autour des sous traces plt.show() #Affichage du graphique/figure Sortie possible :","title":"Explication du code"},{"location":"FR/code/#explication-du-code","text":"Dans cette partie nous allons expliquer les diff\u00e9rentes actions faites par le programmes, par des blocs de lignes de code. Pour pr\u00e9senterons ainsi une sortie possible gr\u00e2ce \u00e0 ces lignes. Vous pouvez aussi retrouver le code complet annot\u00e9 \u00e0 \u00e0 cette adresse pour le main et la fonction . Tout d'abord notre programme est compos\u00e9 de deux scripts Python : - main.py : contenant le corps du programme (script python \u00e0 ex\u00e9cuter pour lancer le programme) - function.py : contenant la fonction utilis\u00e9 dans main.py","title":"Explication du code"},{"location":"FR/code/#bloc-1-initialisation-dun-dataframe-a-partir-dun-fichier-csv","text":"R\u00e9cup\u00e9ration des donn\u00e9es s\u00e9par\u00e9es par des virgules \u00e0 partir d'un fichier csv pour g\u00e9n\u00e9rer un \u00e9chantillon de mani\u00e8re al\u00e9atoire, et ainsi afficher des informations sur ce DataFrame (dimension, statistique, utilisation m\u00e9moire, valeurs non nulles, colonnes, index dtype, ...). dataset1 = pd.read_csv('weather.csv') #Lecture d'un fichier (csv) de valeurs s\u00e9par\u00e9es par des virgules dans un DataFrame dataset1.sample() #G\u00e9n\u00e9ration d'un \u00e9chantillon al\u00e9atoire de chaque groupe d'un objet du DataFrame dataset=dataset1.sample(1000) #Un nouvel DataFrame (dataset) contenant 1000 \u00e9l\u00e8ments \u00e9chantillonn\u00e9s de fa\u00e7on al\u00e9atoire \u00e0 partir de dataset1 print(dataset.shape) #Affichage d'un tuple repr\u00e9sentant la dimension du DataFrame dataset print(dataset.describe()) #Affichage des statistiques pour chaque type de valeurs du DataFrame dataset.info() #Affichage des informations sur le DataFrame, notamment l'index dtype, les colonnnes et les valeurs non nulles et l'utilisation de la m\u00e9moire Sortie possible :","title":"Bloc 1 : initialisation d'un DataFrame \u00e0 partir d'un fichier csv"},{"location":"FR/code/#bloc-2-graphique-en-nuage-de-points-de-la-repartition-des-temperatures","text":"Affichage de la r\u00e9partition des temp\u00e9ratures en fonction des temp\u00e9ratures minimales et temp\u00e9ratures maximales, dans un graphique en nuage de points. dataset.plot(x='Temp_Min', y='Temp_Max', style='o') #Cr\u00e9ation d'un trac\u00e9 de DataFrame, avec l'axe x repr\u00e9sentant les Temp_min et l'axe y repr\u00e9sentant les Temp_Max, dans un style de nuage de points plt.title('Temp_Min vs Temp_Max') #Param\u00e9trage du titre du graphique plt.xlabel('Temp_Min') #Param\u00e9trage du titre de l'axe x plt.ylabel('Temp_Max') #Param\u00e9trage du titre de l'axe y plt.show() #Affichage du graphique/figure Sortie possible :","title":"Bloc 2 : graphique en nuage de points de la r\u00e9partition des temp\u00e9ratures"},{"location":"FR/code/#bloc-3-graphique-en-histogramme-de-la-repartition-des-temperatures-max","text":"Cr\u00e9ation d'un graphique histogramme pour visualiser la r\u00e9partion des valeurs de Temp_Max du DataFrame. plt.figure(figsize=(15,10)) #Cr\u00e9ation d'une figure de taille d\u00e9finie par figsize en inch, 15 inch de largeur et 10 de hauteur plt.tight_layout() #Ajustement des bordures entre et autour des sous traces seabornInstance.distplot(dataset['Temp_Max']) #Permet de dessiner un trac\u00e9 de distribution sur une FacetGrid, permettant de visualiser les donn\u00e9es de DataFrame des Temp_Max dans un format d'histogramme (par d\u00e9faut) plt.show() #Affichage du graphique/figure Sortie possible :","title":"Bloc 3 : graphique en histogramme de la r\u00e9partition des temp\u00e9ratures Max"},{"location":"FR/code/#bloc-4-initialisation-de-la-prediction","text":"Pr\u00e9diction des Temp_Max \u00e0 partir du fichier pr\u00e9c\u00e8dent. X = dataset['Temp_Min'].values.reshape(-1,1) #La valeur X inclut l'attribut Temp_Min y = dataset['Temp_Max'].values.reshape(-1,1) #La valeur y inclut l'attribut Temp_Max X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) #Attribution de 80% des donn\u00e9es \u00e0 l'ensemble de formation et le reste \u00e0 l'ensemble de test reg = LinearRegression().fit(X_train, y_train) #Entrainement du mod\u00e9le en utilisant l'ensemble de formation print(reg.intercept_) #Affichage de l'intersection print(reg.coef_) #Affichage du coefficient directeur de la droite de r\u00e9gression y_pred = reg.predict(X_test) #Utilisation des donn\u00e9es de test pour faire des pr\u00e9dictions sur le Temp_Max df = pd.DataFrame({'Actuelle(Mesur\u00e9es)': y_test.flatten(), 'Pr\u00e9diction(mod\u00e8le)': y_pred.flatten()}) #Construction d'un DataFrame \u00e0 partir des donn\u00e9es pr\u00e9dites et de tests print(df) #Affichage de DataFrame Sortie possible :","title":"Bloc 4 : initialisation de la pr\u00e9diction"},{"location":"FR/code/#bloc-5-graphique-a-barres-verticales-de-la-repartition-des-valeurs-predites-et-mesurees","text":"Cr\u00e9ation du graphique \u00e0 barres verticales montrant la r\u00e9partitions des temp\u00e9ratures mesur\u00e9es et pr\u00e9dites. df1 = df.head(25) #R\u00e9cup\u00e9ration des 25 premi\u00e8res lignes de df pour les mettre dans df1 df1.plot(kind='bar',figsize=(16,10)) #Cr\u00e9ation de DataFrame, de taille 16inch de largeur et 10inch de hauteur, et le style du graphique sera des barres verticales plt.grid(which='major', linestyle='-', linewidth='0.5', color='green') #Cr\u00e9ation de la grille interne (major) du graphique avec un style de trait plein, \u00e9paisseur de 0.5points, une couleur verte plt.grid(which='minor', linestyle=':', linewidth='0.5', color='black') #Cr\u00e9ation du cadre (minor) du graphique avec un style de trait \u00e0 point, \u00e9paisseur de 0.5points, une couleur noire plt.show() #Affichage du graphique/figure Sortie possible :","title":"Bloc 5 : graphique \u00e0 barres verticales de la r\u00e9partition des valeurs pr\u00e9dites et mesur\u00e9es"},{"location":"FR/code/#bloc-6-graphique-de-la-droite-de-regression","text":"Cr\u00e9ation d'un graphique de dispersion en gris avec la droite de r\u00e9gression en rouge calcul\u00e9e pr\u00e9c\u00e8demment plt.title('Mod\u00e8le ax+y') #Param\u00e9trage du titre du graphique plt.xlabel('Temp_Min') #Param\u00e9trage du titre de l'axe x plt.ylabel('Temp_Max') #Param\u00e9trage du titre de l'axe y plt.scatter(X_test, y_test, color='gray') #Cr\u00e9ation d'un diagramme de dispersion y_test par rapport \u00e0 X_test de couleur grise plt.plot(X_test, y_pred, color='red', linewidth=2) #Cr\u00e9ation d'un trac\u00e9 (de la fonction ax+y) de DataFrame, avec l'axe x repr\u00e9sentant les X_Test et l'axe y repr\u00e9sentant les y_pred, dans la couleur rouge et de largeur 2points plt.show() #Affichage du graphique/figure Sortie possible :","title":"Bloc 6 : graphique de la droite de r\u00e9gression"},{"location":"FR/code/#bloc-7-quelques-valeurs-de-la-prediction","text":"Affiche des valeurs en fonction des pr\u00e9dictions print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred)) #Affichage du calcul des valeurs absolues moyennes des erreurs print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred)) #Affichage du calcul de la moyenne des erreurs au carr\u00e9 print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred))) #Affichage du calcul de la racine carr\u00e9e de la moyenne des erreurs quadratiques Sortie possible :","title":"Bloc 7 : quelques valeurs de la pr\u00e9diction"},{"location":"FR/code/#bloc-8-statistique-dun-tableau-de-moyenne","text":"Ajout des valeurs moyennes dans un tableau et affichage de ce tableau et des valeurs moyennes et \u00e9cart-type. Means = [] #Cr\u00e9ation d'un tableau vide des valeurs moyennes Means=testSamples(200, 100,dataset['Temp_Min']) #Ajout des valeurs moyennes dans le tableau avec la fonction testSamples cr\u00e9\u00e9e pr\u00e9c\u00e9demment print(Means) #Affichage du tableau des valeurs moyennes print(np.mean(Means)) #Affichage de la moyenne du tableau Means print(np.mean(dataset['Temp_Min'])) #Affichage de la moyenne du tableau dataset['Temp_Min'] print(np.std(Means)) #Affiche l'\u00e9cart-type des valeurs du tableau Means print(np.std(dataset['Temp_Min'])) #Affiche l'\u00e9cart-type des valeurs du tableau dataset['Temp_Min']","title":"Bloc 8 : statistique d'un tableau de moyenne"},{"location":"FR/code/#bloc-de-la-fonction-associee","text":"La fonction testSamples permet de cr\u00e9er des valeurs \u00e0 partir d'un \u00e9chantillon et ainsi de les ins\u00e9rer dans un tableau. class fonction: #Cr\u00e9ation de la classe fonction pour toutes les fonctions utilisables pour temp.py def testSamples(numTrials, sampleSize, data): #D\u00e9finition de la fonction testSamples prenant en param\u00e8tre numTrials (int), sampleSize (int), data (tableau de float) Means = [] #Cr\u00e9ation d'un tableau vide for t in range(numTrials): #Boucle for commen\u00e7ant de 0 allant \u00e0 numTrials-1 par pas de 1 Y=data.sample(sampleSize) #Y r\u00e9cup\u00e8re un \u00e9chantillon al\u00e9atoire d'\u00e9l\u00e9ments de taille sampleSize Means.append(sum(Y)/len(Y)) #Ajout dans le tabelau de la division de la somme de Y divis\u00e9 par la longueur de Y return Means #On retourne le tableau Means Sortie possible :","title":"Bloc de la fonction associ\u00e9e"},{"location":"FR/code/#bloc-9-diagramme-en-escalier","text":"Cr\u00e9ation d'un histogramme en escalier. plt.figure(1) #Cr\u00e9ation d'une figure avec un unique identifiant \u00e9gal \u00e0 1 plt.hist(Means, bins=10, histtype='step') #Cr\u00e9ation d'un histogramme en escalier avec un seul trait et sans remplissage, avec 10 marches ayant la m\u00eame largeur plt.show() #Affichage du graphique/figure Sortie possible :","title":"Bloc 9 : diagramme en escalier"},{"location":"FR/code/#bloc-10-test-de-shapiro-wilk","text":"Test de Shapiro-Wilk sur une population distribu\u00e9e normalement. stat, p = stats.shapiro(Means) #On fait le test de Shapiro-Wilk qui v\u00e9rifie l\u2019hypoth\u00e8se nulle selon les donn\u00e9es de Means, et retourne la valeur de la statistique du test et la p-value pour l'hypoth\u00e8se du test print('Statistics={}, p={}'.format(stat, p)) #Affichage de la statistique et de la p-value alpha = 0.05 #Iniatialisation de alpha if p > alpha: #Test entre p-value et alpha print('Sample looks Normal (do not reject H0)') #Affichage si p-value > alpha else: print('Sample does not look Normal (reject H0)') #Affichage si p-value < alpha Sortie possible :","title":"Bloc 10 : test de Shapiro-Wilk"},{"location":"FR/code/#bloc-11-boite-a-moustaches","text":"Diagramme en boites et \u00e0 moutaches. La bo\u00eete s'\u00e9tend des valeurs du quartile inf\u00e9rieur au quartile sup\u00e9rieur des donn\u00e9es, avec une ligne \u00e0 la m\u00e9diane. Les moustaches s'\u00e9tendent \u00e0 partir de la bo\u00eete pour montrer l'\u00e9tendue des donn\u00e9es. Les points de vol sont ceux qui se trouvent apr\u00e8s l'extr\u00e9mit\u00e9 des moustaches. plt.boxplot(Means) #Cr\u00e9ation d'un diagramme en boites et \u00e0 moustaches de Means plt.show() #Affichage du graphique/figure Sortie possible :","title":"Bloc 11 : boite \u00e0 moustaches"},{"location":"FR/code/#bloc-12-courbe-de-probabilite","text":"Cr\u00e9ation et affichage de la courbe de probabilit\u00e9 stats.probplot(Means, plot=plt) #Calcule les quantiles de la courbe de probabilit\u00e9 normale de Means et la trace avec matplotlib plt.show() #Affichage du graphique/figure Sortie possible :","title":"Bloc 12 : courbe de probabilit\u00e9"},{"location":"FR/code/#bloc-13-coefficient-de-regression","text":"Ecriture par deux mani\u00e8res diff\u00e9rentes du calcul du coefficient de r\u00e9gression lin\u00e9aire. X, y = make_classification(n_samples=100, n_features=10, n_informative=10, n_redundant=0, random_state=1) #Param\u00e8trage du nuage de points model1 = LogisticRegression() #Initialisation de l'\u00e9valuation du mod\u00e8le 1 par la fonction LogisticRegression() cv1 = RepeatedStratifiedKFold(n_splits=2, n_repeats=5, random_state=1) #Param\u00e9trage de la variable cv1 scores1 = cross_val_score(model1, X, y, scoring='accuracy', cv=cv1, n_jobs=-1) #Param\u00e9trage de la variable scores1 print('LogisticRegression Mean Accuracy: %.3f (%.3f)' % (np.mean(scores1), np.std(scores1))) #Affichage du coefficient de r\u00e9gression lin\u00e9aire moyen pour le mod\u00e8le 1 model2 = LinearDiscriminantAnalysis() #Initialisation de l'\u00e9valuation du mod\u00e8le 2 par la fonction cv2 = RepeatedStratifiedKFold(n_splits=2, n_repeats=5, random_state=1) #Param\u00e9trage de la variable cv2 scores2 = cross_val_score(model2, X, y, scoring='accuracy', cv=cv2, n_jobs=-1) #Param\u00e9trage de la variable scores2 print('LinearDiscriminantAnalysis Mean Accuracy: %.3f (%.3f)' % (np.mean(scores2), np.std(scores2))) #Affichage du coefficient de r\u00e9gression lin\u00e9aire moyen pour le mod\u00e8le 2 Sortie possible :","title":"Bloc 13 : coefficient de r\u00e9gression"},{"location":"FR/code/#bloc-14-diagramme-boite-a-moustaches","text":"Cr\u00e9ation du diagramme boite \u00e0 moustaches plt.boxplot([scores1, scores2], labels=['LR', 'LDA'], showmeans=True) #Cr\u00e9ation d'un diagramme boite \u00e0 moustaches \u00e0 partir de scores1 et scores2 plt.show() #Affichage du graphique/figure Sortie possible :","title":"Bloc 14 : diagramme boite \u00e0 moustaches"},{"location":"FR/code/#bloc-15-test-entre-les-deux-modeles","text":"D\u00e9termination de la P-value et de T-stastitic pour faire un test entre les deux mod\u00e8les t, p = paired_ttest_5x2cv(estimator1=model1, estimator2=model2, X=X, y=y, scoring='accuracy', random_seed=1) #Initialisation du couple de valeurs t et p print('P-value: %.3f, t-Statistic: %.3f' % (p, t)) #Affichage de la p-Value et de t-Statistic initialis\u00e9es ci-dessus if p <= 0.05: #Test de la valeur de la variable p print('Difference between mean performance is probably real') #Affichage si p<=0.05 else: print('Algorithms probably have the same performance') #Affichage si p>0.05 Sortie possible :","title":"Bloc 15 : test entre les deux mod\u00e8les"},{"location":"FR/code/#bloc-16-discriminant","text":"Analyse du discriminant X = standardize(X) #Lissage de la variable X lda = ldaf(n_discriminants=2) #Initialisation du discriminant lda.fit(X, y) #Entrainement du mod\u00e8le en utilisant l'ensemble de formation X_lda = lda.transform(X) #Transforme les valeurs pour qu'elles soient utilisables par les fonctions d'apr\u00e8s plt.figure(figsize=(6, 4)) #Cr\u00e9ation d'une figure avec une certaine taille pr\u00e9cis\u00e9e en argument for lab, col in zip((0, 1),('blue', 'red')): #Boucle pour tracer le nuage de points en fonction de la ligne et de la colonne plt.scatter(X_lda[y == lab, 0],X_lda[y == lab, 1],label=lab,c=col) #Tra\u00e7age du nuage de points plt.xlabel('Linear Discriminant 1') #Param\u00e8trage du titre de l'axe X plt.ylabel('Linear Discriminant 2') #Param\u00e8trage du titre de l'axe Y plt.legend(loc='lower right') #Param\u00e8trage de la l\u00e9gende situ\u00e9e en bas \u00e0 droite plt.tight_layout() #Ajustement des bordures entre et autour des sous traces plt.show() #Affichage du graphique/figure Sortie possible :","title":"Bloc 16 : discriminant"},{"location":"FR/dependances/","text":"Installation des d\u00e9pendances Pour le bon fonctionnement du projet, vous avez besoin d'installer plusieurs d\u00e9pendances. Vous avez besoin des d\u00e9pendances suivantes : - numpy sert \u00e0 cr\u00e9er et manipuler des tableaux multidimensionnels et permet l'utilisation de fonctions math\u00e9matiques dans les dits tableaux. - pandas nous permet la manipulation et l'analyse de donn\u00e9es num\u00e9riques et de s\u00e9ries temporelles. - seaborn nous sert d'interface permettant d'afficher les r\u00e9sultats sous forme de graphiques statistiques. - statsmodels regroupe les mod\u00e8les math\u00e9matiques statistiques existants afin de faire des pr\u00e9visions. - mlxtend est un module de machine learning analysant les donn\u00e9es pour pouvoir ensuite se d\u00e9velopper et affiner les pr\u00e9visions. - matplotlib est destin\u00e9e \u00e0 tracer des graphiques \u00e0 partir de donn\u00e9es. Windows Vous pouvez installer les d\u00e9pendances soit avec Anaconda (m\u00e9thode 1) , soit avec pip (m\u00e9thode 2) . M\u00e9thode 1 : Anaconda Cette m\u00e9thode est plus simple, car vous allez installer Anaconda qui installera une partie des autres d\u00e9pendances (Numpy, Pandas) n\u00e9cessaires au projet. T\u00e9l\u00e9chargez la derni\u00e8re version de Anaconda pour Windows sur le site . Ex\u00e9cutez le fichier .exe , suivez les instructions qui apparaissent \u00e0 l'\u00e9cran jusqu'\u00e0 terminer l'installation. Ensuite vous allez installer la derni\u00e8re d\u00e9pendance n\u00e9cessaire mlxtend, donc ouvrir un Terminal d'Anaconda par l'outil de recherche Windows en tapant \"Anaconda Powershell Prompt\", et copiez la commande suivante : conda install mlxtend --channel conda-forge Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es. M\u00e9thode 2 : pip V\u00e9rifiez que pip est install\u00e9 avec la commande : pip -V S'il n'est pas install\u00e9, t\u00e9l\u00e9chargez le fichier python get-pip.py . Placez ce fichier python dans le dossier d'installation, le chemin d'acc\u00e8s \u00e0 ce dossier ressemble \u00e0 C:\\Users\\XXX\\AppData\\Local\\Programs\\Python\\Python-38\\ Python-38 correspond \u00e0 la version de votre Python, que vous pouvez connaitre en ouvrant un cmd et en tapant la commande python --version . XXX correspond \u00e0 votre nom d'utilisateur Windows. Ensuite ouvrez un cmd, et naviguez jusqu'\u00e0 ce dossier Python avec la commande cd C:\\Users\\XXXX\\AppData\\Local\\Programs\\Python\\Python-38\\ Puis ensuite ex\u00e9cutez le script : python get-pip.py Et voila ! pip est maintenant install\u00e9 sur votre syst\u00e8me. Vous pouvez v\u00e9rifier de nouveau avec la commande : pip -V Maintenant vous pouvez installer les d\u00e9pendances. Tout d'abord, t\u00e9l\u00e9chargez le zip du projet . D\u00e9zippez-le, ouvez un CMD et tapez les commandes suivantes : cd C:\\Users\\XXX\\Documents\\Projet-Python-INSA-3A #Par exemple, d\u00e9pend de l\u00e0 o\u00f9 vous l'avez mis, ici c'est dans les Documents pip install -r requirements.txt Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es. Mac Pour installer ces d\u00e9pendances, vous utiliserez pip un gestionnaire de paquets Python. Installez pip avec les commandes suivantes : curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py pip est normalement install\u00e9. Pour v\u00e9rifier, tapez : pip --version T\u00e9l\u00e9chargez le zip du projet \u00e0 cette adresse ou avec la commande suivante : curl -LJ -o weather.zip https://github.com/AlexTheGeek/Python-Project-INSA-3A/archive/v1.zip Ouvrez un Terminal et tapez les commandes suivantes : unzip weather.zip cd Project-Python-3A-MRI-1 pip install -r requirements.txt Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es. Linux Pour installer les d\u00e9pendances, il faut que pip soit install\u00e9 sur votre syst\u00e8me : Sur Ubuntu pour installer pip, vous pouvez taper la commande suivante : sudo apt-get install python3-pip . Dans la suite vous utiliserez la commande pip mais en passant par le gestionnaire de paquets apt , pour cela il faudra taper la commande pip3 . curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py Pip est normalement install\u00e9. Pour v\u00e9rifier sa version, tapez : pip --version Maintenant vous pouvez installer les d\u00e9pendances. T\u00e9l\u00e9chargez le zip du projet \u00e0 cette adresse ou avec la commande suivante : curl -LJ -o weather.zip https://github.com/AlexTheGeek/Python-Project-INSA-3A/archive/v1.zip Ouvrez un Terminal et tapez les commandes suivantes : unzip weather.zip cd Project-Python-3A-MRI-1 pip install -r requirements.txt Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es.","title":"D\u00e9pendances"},{"location":"FR/dependances/#installation-des-dependances","text":"Pour le bon fonctionnement du projet, vous avez besoin d'installer plusieurs d\u00e9pendances. Vous avez besoin des d\u00e9pendances suivantes : - numpy sert \u00e0 cr\u00e9er et manipuler des tableaux multidimensionnels et permet l'utilisation de fonctions math\u00e9matiques dans les dits tableaux. - pandas nous permet la manipulation et l'analyse de donn\u00e9es num\u00e9riques et de s\u00e9ries temporelles. - seaborn nous sert d'interface permettant d'afficher les r\u00e9sultats sous forme de graphiques statistiques. - statsmodels regroupe les mod\u00e8les math\u00e9matiques statistiques existants afin de faire des pr\u00e9visions. - mlxtend est un module de machine learning analysant les donn\u00e9es pour pouvoir ensuite se d\u00e9velopper et affiner les pr\u00e9visions. - matplotlib est destin\u00e9e \u00e0 tracer des graphiques \u00e0 partir de donn\u00e9es.","title":"Installation des d\u00e9pendances"},{"location":"FR/dependances/#windows","text":"Vous pouvez installer les d\u00e9pendances soit avec Anaconda (m\u00e9thode 1) , soit avec pip (m\u00e9thode 2) .","title":"Windows"},{"location":"FR/dependances/#methode-1-anaconda","text":"Cette m\u00e9thode est plus simple, car vous allez installer Anaconda qui installera une partie des autres d\u00e9pendances (Numpy, Pandas) n\u00e9cessaires au projet. T\u00e9l\u00e9chargez la derni\u00e8re version de Anaconda pour Windows sur le site . Ex\u00e9cutez le fichier .exe , suivez les instructions qui apparaissent \u00e0 l'\u00e9cran jusqu'\u00e0 terminer l'installation. Ensuite vous allez installer la derni\u00e8re d\u00e9pendance n\u00e9cessaire mlxtend, donc ouvrir un Terminal d'Anaconda par l'outil de recherche Windows en tapant \"Anaconda Powershell Prompt\", et copiez la commande suivante : conda install mlxtend --channel conda-forge Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es.","title":"M\u00e9thode 1 : Anaconda"},{"location":"FR/dependances/#methode-2-pip","text":"V\u00e9rifiez que pip est install\u00e9 avec la commande : pip -V S'il n'est pas install\u00e9, t\u00e9l\u00e9chargez le fichier python get-pip.py . Placez ce fichier python dans le dossier d'installation, le chemin d'acc\u00e8s \u00e0 ce dossier ressemble \u00e0 C:\\Users\\XXX\\AppData\\Local\\Programs\\Python\\Python-38\\ Python-38 correspond \u00e0 la version de votre Python, que vous pouvez connaitre en ouvrant un cmd et en tapant la commande python --version . XXX correspond \u00e0 votre nom d'utilisateur Windows. Ensuite ouvrez un cmd, et naviguez jusqu'\u00e0 ce dossier Python avec la commande cd C:\\Users\\XXXX\\AppData\\Local\\Programs\\Python\\Python-38\\ Puis ensuite ex\u00e9cutez le script : python get-pip.py Et voila ! pip est maintenant install\u00e9 sur votre syst\u00e8me. Vous pouvez v\u00e9rifier de nouveau avec la commande : pip -V Maintenant vous pouvez installer les d\u00e9pendances. Tout d'abord, t\u00e9l\u00e9chargez le zip du projet . D\u00e9zippez-le, ouvez un CMD et tapez les commandes suivantes : cd C:\\Users\\XXX\\Documents\\Projet-Python-INSA-3A #Par exemple, d\u00e9pend de l\u00e0 o\u00f9 vous l'avez mis, ici c'est dans les Documents pip install -r requirements.txt Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es.","title":"M\u00e9thode 2 : pip"},{"location":"FR/dependances/#mac","text":"Pour installer ces d\u00e9pendances, vous utiliserez pip un gestionnaire de paquets Python. Installez pip avec les commandes suivantes : curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py pip est normalement install\u00e9. Pour v\u00e9rifier, tapez : pip --version T\u00e9l\u00e9chargez le zip du projet \u00e0 cette adresse ou avec la commande suivante : curl -LJ -o weather.zip https://github.com/AlexTheGeek/Python-Project-INSA-3A/archive/v1.zip Ouvrez un Terminal et tapez les commandes suivantes : unzip weather.zip cd Project-Python-3A-MRI-1 pip install -r requirements.txt Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es.","title":"Mac"},{"location":"FR/dependances/#linux","text":"Pour installer les d\u00e9pendances, il faut que pip soit install\u00e9 sur votre syst\u00e8me : Sur Ubuntu pour installer pip, vous pouvez taper la commande suivante : sudo apt-get install python3-pip . Dans la suite vous utiliserez la commande pip mais en passant par le gestionnaire de paquets apt , pour cela il faudra taper la commande pip3 . curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py Pip est normalement install\u00e9. Pour v\u00e9rifier sa version, tapez : pip --version Maintenant vous pouvez installer les d\u00e9pendances. T\u00e9l\u00e9chargez le zip du projet \u00e0 cette adresse ou avec la commande suivante : curl -LJ -o weather.zip https://github.com/AlexTheGeek/Python-Project-INSA-3A/archive/v1.zip Ouvrez un Terminal et tapez les commandes suivantes : unzip weather.zip cd Project-Python-3A-MRI-1 pip install -r requirements.txt Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es.","title":"Linux"},{"location":"FR/function/","text":"Les fonctions Dans cette partie nous allons d\u00e9tailler les param\u00e8tres pris par chacune des fonctions de chacune des biblioth\u00e8ques. pandas pandas.read_csv(\u2019filepath\u2019) Lecture d\u2019un fichier csv contenant des valeurs s\u00e9par\u00e9es par des virgules dans un DataFrame. Param\u00e8tre filepath : str, path object N\u2019importe quel chemin d\u2019acc\u00e9s (chemin absolu ou chemin relatif (r\u00e9pertoire courant)) ou m\u00eame URL est accept\u00e9 pandas.DataFrame.sample(n=None) Retourne un \u00e9chantillon al\u00e9atoire d\u2019\u00e9l\u00e9ments \u00e0 partir d\u2019un DataFrame (axe d\u2019objets). Param\u00e8tre n : int Nombre d\u2019\u00e9l\u00e9ments \u00e0 retourner. Valeur par d\u00e9faut est 1. pandas.DataFrame.shape Retourne un tuple repr\u00e9sentant la dimension du DataFrame. pandas.DataFrame.describe(percentiles=None) Retourne la valeur de chaque quartile. Param\u00e8tre percentiles : liste de nombres Les quartiles \u00e0 inclure dans la sortie. Les valeurs doivent \u00eatre comprises entre 0 et 1. La valeur par d\u00e9faut [0.25, 0.5, 0.75] repr\u00e9sentant anssi le premier quartile, la m\u00e9diane et le troisi\u00e8me quartile. pandas.DataFrame.info() Affichage des informations sur le DataFrame. Param\u00e8tre data : DataFrame Affichage des informations \u00e0 propos de ce DataFrame. pandas.DataFrame.plot(x=None, y=None, style=None) Cr\u00e9ation d\u2019un trac\u00e9 de DataFrame. Param\u00e8tres data : DataFrame L\u2019objet pour laquel la m\u00e9thode est appel\u00e9e. x : str, \u00e9tiquette \u00c9tiquette de l\u2019axe des abscisses. Utilis\u00e9 seulement si c\u2019est un DataFrame en data. y : str, \u00e9tiquette \u00c9tiquette de l\u2019axe des ordonn\u00e9es. Utilis\u00e9 seulement si c\u2019est un DataFrame en data. style : str Style de l'affichage des points sur le graphique, par d\u00e9faut tous les points sont reli\u00e9s. \u2018.\u2018 : point, marqueur point. \u2018o\u2018 : point cercle, marqueur circulaire. \u2018v\u2018 : point triangle bas, marqueur triangulaire bas. \u2018<\u2018 : point triangle gauche, marqueur triangulaire gauche. \u2018>\u2018 : point triangle droit, marqueur triangulaire droit. \u2018s\u2018 : point carr\u00e9, marqueur carr\u00e9. kind : str, \u00e9tiquette Le type de graphique \u00e0 afficher. \u2018line\u2018 : graphique \u00e0 trac\u00e9 de ligne (default). \u2018bar\u2018 : graphique \u00e0 barres verticales. figsize : (int, int) Taille de la figure. Largeur, hauteur en inch. pandas.DataFrame.values() Retourne une repr\u00e9sentation Numpy de la DataFrame. pandas.DataFrame.sample(n=None) Retourne un \u00e9chantillon de n \u00e9l\u00e9ments. Param\u00e8tre n : int Nombre d\u2019items \u00e0 retourner. pandas.DataFrame.head(n=5) Retourne les n premiers \u00e9l\u00e9ments. Param\u00e8tre n : int Nombre d\u2019\u00e9l\u00e9ments \u00e0 retourner. pandas.DataFrame(data=None) Retourne tableau \u00e0 deux dimensions, de taille variable (DataFrame). Param\u00e8tre data : ndarray, DataFrame, dict Les donn\u00e9es pour former le tableau (DataFrame) matplotlib matplotlib.pyplot.title(label) Param\u00e8tre le titre du graphique. Param\u00e8tre label : str Texte utilis\u00e9 pour le titre. matplotlib.pyplot.xlabel(label) Param\u00e8tre le titre de l\u2019axe des abscisses du graphique. Param\u00e8tre label : str Texte utilis\u00e9 pour le titre de l\u2019axe. matplotlib.pyplot.ylabel(label) Param\u00e8tre le titre de l\u2019axe des ordonn\u00e9es du graphique. Param\u00e8tre label : str Texte utilis\u00e9 pour le titre de l\u2019axe. matplotlib.pyplot.show(*, block=None) Affichage de toutes les figures. Param\u00e8tre block : bool par d\u00e9faut \u00e0 True. Si c\u2019est True, la boucle prinicipale est stopp\u00e9e jusqu\u2019\u00e0 ce que toutes les fen\u00eatres soit ferm\u00e9es. Si c\u2019est False, toutes les fen\u00eatres sont ouvertes imm\u00e9diatement. matplotlib.pyplot.figure(num=None,figsize=None) Cr\u00e9ation d\u2019une nouvelle figure. Param\u00e8tres figsize : (float,float) par d\u00e9faut (6.4, 4.8). largeur, hauteur en inch. num : int identifiant unique de la figure. matplotlib.pyplot.tight_layout(pad=1.08) Ajustement des bordures entre et autour des sous trac\u00e9s. Param\u00e8tre pad : float par d\u00e9faut 1.08. Espace entre le bord de la figure et le bord du trac\u00e9. matplotlib.pyplot.grid(which=\u2019ma jor\u2019,**kwargs) D\u00e9finir les propri\u00e9t\u00e9s des lignes du graphique. Param\u00e8tres label : \u2019major\u2019, \u2019minor\u2019, \u2019both\u2019 Les lignes de la grille sur lesquelles appliquer les changements. **kwargs : Toutes les propri\u00e9t\u00e9s des Line2D de matplotlib linestyle : \u2019-\u2019, \u2019\u2013\u2019, \u2019-.\u2019, \u2019:\u2019 linewidth : float color : la couleur matplotlib.pyplot.scatter(x,y,c=None,**kwargs) Diagramme de dispersion de y en fonction de x avec des couleurs diff\u00e9rentes. Param\u00e8tres x : float ou forme de tableau Position des donn\u00e9es en x. y : float ou forme de tableau Position des donn\u00e9es en y. c : forme de tableau ou liste de couleur La couleur des points sur le graphique. **kargs : Propri\u00e9t\u00e9s suppl\u00e9mentaires color : la couleur. label : list ou str, les \u00e9tiquettes pour les \u00e9l\u00e8ments l\u00e9gend\u00e9s. matplotlib.pyplot.plot(x,y, **kwargs) Graphique de y en fonction de x. Param\u00e8tres x : forme de tableau Coordonn\u00e9es horizontales. y : forme de tableau Coordonn\u00e9es verticales. **kwargs : Toutes les proprit\u00e9s des Line2D de matplotlib color : la couleur. matplotlib.pyplot.hist(x, bins=None, histtype=\u2019bar\u2019) Graphique en histogramme. Param\u00e8tres x : forme de tableau Les valeurs d\u2019entr\u00e9e. bins : int D\u00e9finition du nombre de bandes de m\u00eame largeur sur le graphique. histtype : \u2019bar\u2019, \u2019barstacked\u2019, \u2019step\u2019, \u2019stepfilled\u2019, default: \u2019bar\u2019 Type d\u2019histogramme \u00e0 tracer. matplotlib.pyplot.box(x, labels=None, showmeans=None) Graphique en bo\u00eete \u00e0 moustaches. Param\u00e8tres x : forme de tableau Les valeurs d\u2019entr\u00e9e. labels : sequence \u00c9tiquette pour chaque ensemble de donn\u00e9es. showmeans : bool, default False Moyenne arthim\u00e9tique. seaborn searborn.displot(data=None) Ajustement des bordures entre et autour des sous trac\u00e9s. Param\u00e8tre data : pandas.DataFrame, numpy.ndarray Structure des donn\u00e9es d\u2019entr\u00e9e. matplotlib.pyplot.grid( args, *kwargs) Placer une l\u00e9gende sur les axes. Param\u00e8tre **kwargs : Toutes les propri\u00e9t\u00e9s sur les l\u00e9gendes loc : str, position de la l\u00e9gende. sklearn sklearn.model_selection.train_test_split(*arrays, test_size=None, random_state=None) Diviser la matrice ou le tableau en sous-ensemble d\u2019entrainement et de tests. Param\u00e8tres *arrays : s\u00e9quence d\u2019indexables avec la m\u00eame longueur. Les entr\u00e9es autoris\u00e9es sont les listes, les tableaux num\u00e9ris\u00e9s, les matrices scipy-sparse ou les cadres de donn\u00e9es pandas. test_size : float ou int S\u2019il est float, il doit \u00eatre compris entre 0,0 et 1,0 et repr\u00e9sent\u00e9 la proportion de l\u2019ensemble de donn\u00e9es \u00e0 inclure dans la r\u00e9partition de l\u2019essai. Si int, repr\u00e9sente le nombre absolu d\u2019\u00e9chantillons \u00e0 tester. Si none, la valeur est fix\u00e9e au compl\u00e9ment de la taille du train. random_state : float ou int Contr\u00f4le le brassage appliqu\u00e9 aux donn\u00e9es avant d\u2019appliquer le fractionnement. Passe un int pour une sortie reproductible sur plusieurs appels de fonction. sklearn.model.linear_model.LinearRegression().fit(X,Y) Entrainement du mod\u00e8le lin\u00e9aire. Param\u00e8tres X : forme de tableau Les donn\u00e9es de formation. Y : forme de tableau Les valeurs cibles. sklearn.model.linear_model.LinearRegression().fit().intercept_ Retourne l\u2019intersection du mod\u00e8le. sklearn.model.linear_model.LinearRegression().fit().coef_ Retourne le coefficient directeur de la droite de r\u00e9gression. sklearn.model.linear_model.LinearRegression().fit().predict(X) Pr\u00e9voir en fonction du mod\u00e9le lin\u00e9aire. Param\u00e8tre X : forme de tableau Un \u00e9chantillon de valeur. sklearn.metrics.mean_absolute_error(y_true, y_pred) Perte moyenne par r\u00e9gression d\u2019erreur absolue. Param\u00e8tres y_true : forme de tableau Valeur cible de base. y_pred : forme de tableau Valeurs cibles estim\u00e9es. sklearn.metrics.mean_squared_error(y_true, y_pred) Perte de r\u00e9gression de l\u2019erreur au carr\u00e9 moyenne. Param\u00e8tres y_true : forme de tableau Valeur cible de base. y_pred : forme de tableau Valeurs cibles estim\u00e9es. sklearn.datasets.make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=2, random_state=None) G\u00e9n\u00e9rer un syst\u00e8me de classification al\u00e9atoire de classe n. Param\u00e8tres n_samples : int Nombre d\u2019\u00e9chantillons. n_features : int Le nombre total d\u2019\u00e9l\u00e9ments. n_informative : int Nombre d\u2019\u00e9l\u00e9m\u00e9nts d\u2019information. n_redundant : int Nombre d\u2019\u00e9l\u00e9ments redondants. random_state : int D\u00e9termine la g\u00e9n\u00e9ration de nombres al\u00e9atoires pour la cr\u00e9ation d\u2019un ensemble de donn\u00e9es. sklearn.model_selection.RepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=None) R\u00e9p\u00e9te n fois le K-Fold avec une r\u00e9partition al\u00e9atoire diff\u00e9rente dans chaque r\u00e9p\u00e9tition. Param\u00e8tres n_splits : int Nombre de plis. n_repeats : int Nombre de fois que le validateur crois\u00e9 doit \u00eatre r\u00e9p\u00e9t\u00e9. random_state : int Contr\u00f4le la g\u00e9n\u00e9ration des \u00e9tats al\u00e9atoires pour chaque r\u00e9p\u00e9tition. sklearn.model_selection.cross_val_score(estimator, X, y=None, scoring=None, cv=None, n_jobs=None) Evalue un score par validation crois\u00e9e. Param\u00e8tres estimator : objet estimateur mettant en \u0153uvre l\u2019ajustement L\u2019objet \u00e0 utiliser pour adapter les donn\u00e9es. X : forme de tableau Les donn\u00e9es \u00e0 adapter. y : forme de tableau La variable cible \u00e0 essayer de pr\u00e9voir dans le cas d\u2019un apprentissage supervis\u00e9. scoring : str Pointeur objet. cv : int D\u00e9termine la strat\u00e9gie de fractionnement de la validation crois\u00e9e. Sp\u00e9cifie le nombre de plis dans le (Stratified)KFold . n_jobs : int Nombre de t\u00e2ches \u00e0 g\u00e9rer en arri\u00e8re plan/en parall\u00e8le. numpy numpy.sqrt(x) Retourne racine carr\u00e9 non n\u00e9gative d\u2019un tableau par \u00e9l\u00e9ment. Param\u00e8tre x : forme de tableau, float, int Valeur sous la racine carr\u00e9 qui est requise. numpy.mean(a) Retourne la moyenne du tableau. Param\u00e8tre a : forme de tableau Tableau contenant les valeurs dont la moyenne est souhait\u00e9e. numpy.std(a) Retourne l\u2019\u00e9cart-type d\u2019un tableau. Param\u00e8tre a : forme de tableau Tableau contenant les valeurs dont l\u2019\u00e9cart-type est souhait\u00e9. scipy scipy.stats.shapiro(x) R\u00e9alisation du test de Shapiro-Wilk sur un tableau de donn\u00e9es. Retourne la statistique du test (float) et la p-value (float). Param\u00e8tre x : forme de tableau, float, int Tableau de donn\u00e9es pour faire le test. scipy.stats.probplot(x, plot=None) Calculer des quartiles pour une courbe de probabilit\u00e9 (par d\u00e9faut de probabilit\u00e9 normale), et \u00e9ventuellement tracer la courbe. Param\u00e8tres x : forme de tableau, float, int Tableau de donn\u00e9es pour faire le graphique. plot : objet Type de trac\u00e9. mlxtend mlxtend.evaluate.paired_ttest_5x2cv(estimator1, estimator2, X, y, scoring=None, ran- dom_seed=None) Met en \u0153uvre le test t jumel\u00e9 5x2cv propos\u00e9 par Dieterrich (1998) pour comparer les performances de deux mod\u00e8les. Retourne la statistique t et la valeur p. Param\u00e8tres estimator1 : r\u00e9gresseur estimator2 : r\u00e9gresseur X : forme de tableau Les valeurs d\u2019entrainement. y : forme de tableau Les valeurs cibles. scoring : str, accuracy, f1, precision, recall, roc_auc sklearn scoring identificateur de cha\u00eene de caract\u00e8res m\u00e9triques. random_seed : int Nombre al\u00e9atoire pour la cr\u00e9ation des s\u00e9quences d\u2019essai/train. mlxtend.preprocessing.standardize(array) Normaliser les colonnes dans les Pandas DataFrame (Tableau). Param\u00e8tre array : forme de tableau Pandas DataFrame. mlxtend.feature_extraction.LinearDiscriminantAnalysis(n_discriminants=None) Classe d\u2019analyse du discriminant lin\u00e9aire. Param\u00e8tre n_discriminants : int Le nombre de discriminant pour la transformation. mlxtend.feature_extraction.LinearDiscriminantAnalysis().fit(X,y) Entraine le mod\u00e8le LDA avec X. Param\u00e8tres X : forme de tableau Les valeurs d\u2019entrainement. y : forme de tableau Les valeurs cibles. mlxtend.feature_extraction.LinearDiscriminantAnalysis().transform(X) Application de la transformation lin\u00e9aire sur X. Param\u00e8tre X : forme de tableau Les valeurs d\u2019entrainement.","title":"Les fonctions"},{"location":"FR/function/#les-fonctions","text":"Dans cette partie nous allons d\u00e9tailler les param\u00e8tres pris par chacune des fonctions de chacune des biblioth\u00e8ques.","title":"Les fonctions"},{"location":"FR/function/#pandas","text":"","title":"pandas"},{"location":"FR/function/#pandasread_csvfilepath","text":"Lecture d\u2019un fichier csv contenant des valeurs s\u00e9par\u00e9es par des virgules dans un DataFrame. Param\u00e8tre filepath : str, path object N\u2019importe quel chemin d\u2019acc\u00e9s (chemin absolu ou chemin relatif (r\u00e9pertoire courant)) ou m\u00eame URL est accept\u00e9","title":"pandas.read_csv(\u2019filepath\u2019)"},{"location":"FR/function/#pandasdataframesamplennone","text":"Retourne un \u00e9chantillon al\u00e9atoire d\u2019\u00e9l\u00e9ments \u00e0 partir d\u2019un DataFrame (axe d\u2019objets). Param\u00e8tre n : int Nombre d\u2019\u00e9l\u00e9ments \u00e0 retourner. Valeur par d\u00e9faut est 1.","title":"pandas.DataFrame.sample(n=None)"},{"location":"FR/function/#pandasdataframeshape","text":"Retourne un tuple repr\u00e9sentant la dimension du DataFrame.","title":"pandas.DataFrame.shape"},{"location":"FR/function/#pandasdataframedescribepercentilesnone","text":"Retourne la valeur de chaque quartile. Param\u00e8tre percentiles : liste de nombres Les quartiles \u00e0 inclure dans la sortie. Les valeurs doivent \u00eatre comprises entre 0 et 1. La valeur par d\u00e9faut [0.25, 0.5, 0.75] repr\u00e9sentant anssi le premier quartile, la m\u00e9diane et le troisi\u00e8me quartile.","title":"pandas.DataFrame.describe(percentiles=None)"},{"location":"FR/function/#pandasdataframeinfo","text":"Affichage des informations sur le DataFrame. Param\u00e8tre data : DataFrame Affichage des informations \u00e0 propos de ce DataFrame.","title":"pandas.DataFrame.info()"},{"location":"FR/function/#pandasdataframeplotxnone-ynone-stylenone","text":"Cr\u00e9ation d\u2019un trac\u00e9 de DataFrame. Param\u00e8tres data : DataFrame L\u2019objet pour laquel la m\u00e9thode est appel\u00e9e. x : str, \u00e9tiquette \u00c9tiquette de l\u2019axe des abscisses. Utilis\u00e9 seulement si c\u2019est un DataFrame en data. y : str, \u00e9tiquette \u00c9tiquette de l\u2019axe des ordonn\u00e9es. Utilis\u00e9 seulement si c\u2019est un DataFrame en data. style : str Style de l'affichage des points sur le graphique, par d\u00e9faut tous les points sont reli\u00e9s. \u2018.\u2018 : point, marqueur point. \u2018o\u2018 : point cercle, marqueur circulaire. \u2018v\u2018 : point triangle bas, marqueur triangulaire bas. \u2018<\u2018 : point triangle gauche, marqueur triangulaire gauche. \u2018>\u2018 : point triangle droit, marqueur triangulaire droit. \u2018s\u2018 : point carr\u00e9, marqueur carr\u00e9. kind : str, \u00e9tiquette Le type de graphique \u00e0 afficher. \u2018line\u2018 : graphique \u00e0 trac\u00e9 de ligne (default). \u2018bar\u2018 : graphique \u00e0 barres verticales. figsize : (int, int) Taille de la figure. Largeur, hauteur en inch.","title":"pandas.DataFrame.plot(x=None, y=None, style=None)"},{"location":"FR/function/#pandasdataframevalues","text":"Retourne une repr\u00e9sentation Numpy de la DataFrame.","title":"pandas.DataFrame.values()"},{"location":"FR/function/#pandasdataframesamplennone_1","text":"Retourne un \u00e9chantillon de n \u00e9l\u00e9ments. Param\u00e8tre n : int Nombre d\u2019items \u00e0 retourner.","title":"pandas.DataFrame.sample(n=None)"},{"location":"FR/function/#pandasdataframeheadn5","text":"Retourne les n premiers \u00e9l\u00e9ments. Param\u00e8tre n : int Nombre d\u2019\u00e9l\u00e9ments \u00e0 retourner.","title":"pandas.DataFrame.head(n=5)"},{"location":"FR/function/#pandasdataframedatanone","text":"Retourne tableau \u00e0 deux dimensions, de taille variable (DataFrame). Param\u00e8tre data : ndarray, DataFrame, dict Les donn\u00e9es pour former le tableau (DataFrame)","title":"pandas.DataFrame(data=None)"},{"location":"FR/function/#matplotlib","text":"","title":"matplotlib"},{"location":"FR/function/#matplotlibpyplottitlelabel","text":"Param\u00e8tre le titre du graphique. Param\u00e8tre label : str Texte utilis\u00e9 pour le titre.","title":"matplotlib.pyplot.title(label)"},{"location":"FR/function/#matplotlibpyplotxlabellabel","text":"Param\u00e8tre le titre de l\u2019axe des abscisses du graphique. Param\u00e8tre label : str Texte utilis\u00e9 pour le titre de l\u2019axe.","title":"matplotlib.pyplot.xlabel(label)"},{"location":"FR/function/#matplotlibpyplotylabellabel","text":"Param\u00e8tre le titre de l\u2019axe des ordonn\u00e9es du graphique. Param\u00e8tre label : str Texte utilis\u00e9 pour le titre de l\u2019axe.","title":"matplotlib.pyplot.ylabel(label)"},{"location":"FR/function/#matplotlibpyplotshow-blocknone","text":"Affichage de toutes les figures. Param\u00e8tre block : bool par d\u00e9faut \u00e0 True. Si c\u2019est True, la boucle prinicipale est stopp\u00e9e jusqu\u2019\u00e0 ce que toutes les fen\u00eatres soit ferm\u00e9es. Si c\u2019est False, toutes les fen\u00eatres sont ouvertes imm\u00e9diatement.","title":"matplotlib.pyplot.show(*, block=None)"},{"location":"FR/function/#matplotlibpyplotfigurenumnonefigsizenone","text":"Cr\u00e9ation d\u2019une nouvelle figure. Param\u00e8tres figsize : (float,float) par d\u00e9faut (6.4, 4.8). largeur, hauteur en inch. num : int identifiant unique de la figure.","title":"matplotlib.pyplot.figure(num=None,figsize=None)"},{"location":"FR/function/#matplotlibpyplottight_layoutpad108","text":"Ajustement des bordures entre et autour des sous trac\u00e9s. Param\u00e8tre pad : float par d\u00e9faut 1.08. Espace entre le bord de la figure et le bord du trac\u00e9.","title":"matplotlib.pyplot.tight_layout(pad=1.08)"},{"location":"FR/function/#matplotlibpyplotgridwhichma-jorkwargs","text":"D\u00e9finir les propri\u00e9t\u00e9s des lignes du graphique. Param\u00e8tres label : \u2019major\u2019, \u2019minor\u2019, \u2019both\u2019 Les lignes de la grille sur lesquelles appliquer les changements. **kwargs : Toutes les propri\u00e9t\u00e9s des Line2D de matplotlib linestyle : \u2019-\u2019, \u2019\u2013\u2019, \u2019-.\u2019, \u2019:\u2019 linewidth : float color : la couleur","title":"matplotlib.pyplot.grid(which=\u2019ma jor\u2019,**kwargs)"},{"location":"FR/function/#matplotlibpyplotscatterxycnonekwargs","text":"Diagramme de dispersion de y en fonction de x avec des couleurs diff\u00e9rentes. Param\u00e8tres x : float ou forme de tableau Position des donn\u00e9es en x. y : float ou forme de tableau Position des donn\u00e9es en y. c : forme de tableau ou liste de couleur La couleur des points sur le graphique. **kargs : Propri\u00e9t\u00e9s suppl\u00e9mentaires color : la couleur. label : list ou str, les \u00e9tiquettes pour les \u00e9l\u00e8ments l\u00e9gend\u00e9s.","title":"matplotlib.pyplot.scatter(x,y,c=None,**kwargs)"},{"location":"FR/function/#matplotlibpyplotplotxy-kwargs","text":"Graphique de y en fonction de x. Param\u00e8tres x : forme de tableau Coordonn\u00e9es horizontales. y : forme de tableau Coordonn\u00e9es verticales. **kwargs : Toutes les proprit\u00e9s des Line2D de matplotlib color : la couleur.","title":"matplotlib.pyplot.plot(x,y, **kwargs)"},{"location":"FR/function/#matplotlibpyplothistx-binsnone-histtypebar","text":"Graphique en histogramme. Param\u00e8tres x : forme de tableau Les valeurs d\u2019entr\u00e9e. bins : int D\u00e9finition du nombre de bandes de m\u00eame largeur sur le graphique. histtype : \u2019bar\u2019, \u2019barstacked\u2019, \u2019step\u2019, \u2019stepfilled\u2019, default: \u2019bar\u2019 Type d\u2019histogramme \u00e0 tracer.","title":"matplotlib.pyplot.hist(x, bins=None, histtype=\u2019bar\u2019)"},{"location":"FR/function/#matplotlibpyplotboxx-labelsnone-showmeansnone","text":"Graphique en bo\u00eete \u00e0 moustaches. Param\u00e8tres x : forme de tableau Les valeurs d\u2019entr\u00e9e. labels : sequence \u00c9tiquette pour chaque ensemble de donn\u00e9es. showmeans : bool, default False Moyenne arthim\u00e9tique.","title":"matplotlib.pyplot.box(x, labels=None, showmeans=None)"},{"location":"FR/function/#seaborn","text":"","title":"seaborn"},{"location":"FR/function/#searborndisplotdatanone","text":"Ajustement des bordures entre et autour des sous trac\u00e9s. Param\u00e8tre data : pandas.DataFrame, numpy.ndarray Structure des donn\u00e9es d\u2019entr\u00e9e.","title":"searborn.displot(data=None)"},{"location":"FR/function/#matplotlibpyplotgridargskwargs","text":"Placer une l\u00e9gende sur les axes. Param\u00e8tre **kwargs : Toutes les propri\u00e9t\u00e9s sur les l\u00e9gendes loc : str, position de la l\u00e9gende.","title":"matplotlib.pyplot.grid(args,*kwargs)"},{"location":"FR/function/#sklearn","text":"","title":"sklearn"},{"location":"FR/function/#sklearnmodel_selectiontrain_test_splitarrays-test_sizenone-random_statenone","text":"Diviser la matrice ou le tableau en sous-ensemble d\u2019entrainement et de tests. Param\u00e8tres *arrays : s\u00e9quence d\u2019indexables avec la m\u00eame longueur. Les entr\u00e9es autoris\u00e9es sont les listes, les tableaux num\u00e9ris\u00e9s, les matrices scipy-sparse ou les cadres de donn\u00e9es pandas. test_size : float ou int S\u2019il est float, il doit \u00eatre compris entre 0,0 et 1,0 et repr\u00e9sent\u00e9 la proportion de l\u2019ensemble de donn\u00e9es \u00e0 inclure dans la r\u00e9partition de l\u2019essai. Si int, repr\u00e9sente le nombre absolu d\u2019\u00e9chantillons \u00e0 tester. Si none, la valeur est fix\u00e9e au compl\u00e9ment de la taille du train. random_state : float ou int Contr\u00f4le le brassage appliqu\u00e9 aux donn\u00e9es avant d\u2019appliquer le fractionnement. Passe un int pour une sortie reproductible sur plusieurs appels de fonction.","title":"sklearn.model_selection.train_test_split(*arrays, test_size=None, random_state=None)"},{"location":"FR/function/#sklearnmodellinear_modellinearregressionfitxy","text":"Entrainement du mod\u00e8le lin\u00e9aire. Param\u00e8tres X : forme de tableau Les donn\u00e9es de formation. Y : forme de tableau Les valeurs cibles.","title":"sklearn.model.linear_model.LinearRegression().fit(X,Y)"},{"location":"FR/function/#sklearnmodellinear_modellinearregressionfitintercept_","text":"Retourne l\u2019intersection du mod\u00e8le.","title":"sklearn.model.linear_model.LinearRegression().fit().intercept_"},{"location":"FR/function/#sklearnmodellinear_modellinearregressionfitcoef_","text":"Retourne le coefficient directeur de la droite de r\u00e9gression.","title":"sklearn.model.linear_model.LinearRegression().fit().coef_"},{"location":"FR/function/#sklearnmodellinear_modellinearregressionfitpredictx","text":"Pr\u00e9voir en fonction du mod\u00e9le lin\u00e9aire. Param\u00e8tre X : forme de tableau Un \u00e9chantillon de valeur.","title":"sklearn.model.linear_model.LinearRegression().fit().predict(X)"},{"location":"FR/function/#sklearnmetricsmean_absolute_errory_true-y_pred","text":"Perte moyenne par r\u00e9gression d\u2019erreur absolue. Param\u00e8tres y_true : forme de tableau Valeur cible de base. y_pred : forme de tableau Valeurs cibles estim\u00e9es.","title":"sklearn.metrics.mean_absolute_error(y_true, y_pred)"},{"location":"FR/function/#sklearnmetricsmean_squared_errory_true-y_pred","text":"Perte de r\u00e9gression de l\u2019erreur au carr\u00e9 moyenne. Param\u00e8tres y_true : forme de tableau Valeur cible de base. y_pred : forme de tableau Valeurs cibles estim\u00e9es.","title":"sklearn.metrics.mean_squared_error(y_true, y_pred)"},{"location":"FR/function/#sklearndatasetsmake_classificationn_samples100-n_features20-n_informative2-n_redundant2-random_statenone","text":"G\u00e9n\u00e9rer un syst\u00e8me de classification al\u00e9atoire de classe n. Param\u00e8tres n_samples : int Nombre d\u2019\u00e9chantillons. n_features : int Le nombre total d\u2019\u00e9l\u00e9ments. n_informative : int Nombre d\u2019\u00e9l\u00e9m\u00e9nts d\u2019information. n_redundant : int Nombre d\u2019\u00e9l\u00e9ments redondants. random_state : int D\u00e9termine la g\u00e9n\u00e9ration de nombres al\u00e9atoires pour la cr\u00e9ation d\u2019un ensemble de donn\u00e9es.","title":"sklearn.datasets.make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=2, random_state=None)"},{"location":"FR/function/#sklearnmodel_selectionrepeatedstratifiedkfoldn_splits5-n_repeats10-random_statenone","text":"R\u00e9p\u00e9te n fois le K-Fold avec une r\u00e9partition al\u00e9atoire diff\u00e9rente dans chaque r\u00e9p\u00e9tition. Param\u00e8tres n_splits : int Nombre de plis. n_repeats : int Nombre de fois que le validateur crois\u00e9 doit \u00eatre r\u00e9p\u00e9t\u00e9. random_state : int Contr\u00f4le la g\u00e9n\u00e9ration des \u00e9tats al\u00e9atoires pour chaque r\u00e9p\u00e9tition.","title":"sklearn.model_selection.RepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=None)"},{"location":"FR/function/#sklearnmodel_selectioncross_val_scoreestimator-x-ynone-scoringnone-cvnone-n_jobsnone","text":"Evalue un score par validation crois\u00e9e. Param\u00e8tres estimator : objet estimateur mettant en \u0153uvre l\u2019ajustement L\u2019objet \u00e0 utiliser pour adapter les donn\u00e9es. X : forme de tableau Les donn\u00e9es \u00e0 adapter. y : forme de tableau La variable cible \u00e0 essayer de pr\u00e9voir dans le cas d\u2019un apprentissage supervis\u00e9. scoring : str Pointeur objet. cv : int D\u00e9termine la strat\u00e9gie de fractionnement de la validation crois\u00e9e. Sp\u00e9cifie le nombre de plis dans le (Stratified)KFold . n_jobs : int Nombre de t\u00e2ches \u00e0 g\u00e9rer en arri\u00e8re plan/en parall\u00e8le.","title":"sklearn.model_selection.cross_val_score(estimator, X, y=None, scoring=None, cv=None, n_jobs=None)"},{"location":"FR/function/#numpy","text":"","title":"numpy"},{"location":"FR/function/#numpysqrtx","text":"Retourne racine carr\u00e9 non n\u00e9gative d\u2019un tableau par \u00e9l\u00e9ment. Param\u00e8tre x : forme de tableau, float, int Valeur sous la racine carr\u00e9 qui est requise.","title":"numpy.sqrt(x)"},{"location":"FR/function/#numpymeana","text":"Retourne la moyenne du tableau. Param\u00e8tre a : forme de tableau Tableau contenant les valeurs dont la moyenne est souhait\u00e9e.","title":"numpy.mean(a)"},{"location":"FR/function/#numpystda","text":"Retourne l\u2019\u00e9cart-type d\u2019un tableau. Param\u00e8tre a : forme de tableau Tableau contenant les valeurs dont l\u2019\u00e9cart-type est souhait\u00e9.","title":"numpy.std(a)"},{"location":"FR/function/#scipy","text":"","title":"scipy"},{"location":"FR/function/#scipystatsshapirox","text":"R\u00e9alisation du test de Shapiro-Wilk sur un tableau de donn\u00e9es. Retourne la statistique du test (float) et la p-value (float). Param\u00e8tre x : forme de tableau, float, int Tableau de donn\u00e9es pour faire le test.","title":"scipy.stats.shapiro(x)"},{"location":"FR/function/#scipystatsprobplotx-plotnone","text":"Calculer des quartiles pour une courbe de probabilit\u00e9 (par d\u00e9faut de probabilit\u00e9 normale), et \u00e9ventuellement tracer la courbe. Param\u00e8tres x : forme de tableau, float, int Tableau de donn\u00e9es pour faire le graphique. plot : objet Type de trac\u00e9.","title":"scipy.stats.probplot(x, plot=None)"},{"location":"FR/function/#mlxtend","text":"","title":"mlxtend"},{"location":"FR/function/#mlxtendevaluatepaired_ttest_5x2cvestimator1-estimator2-x-y-scoringnone-ran-dom_seednone","text":"Met en \u0153uvre le test t jumel\u00e9 5x2cv propos\u00e9 par Dieterrich (1998) pour comparer les performances de deux mod\u00e8les. Retourne la statistique t et la valeur p. Param\u00e8tres estimator1 : r\u00e9gresseur estimator2 : r\u00e9gresseur X : forme de tableau Les valeurs d\u2019entrainement. y : forme de tableau Les valeurs cibles. scoring : str, accuracy, f1, precision, recall, roc_auc sklearn scoring identificateur de cha\u00eene de caract\u00e8res m\u00e9triques. random_seed : int Nombre al\u00e9atoire pour la cr\u00e9ation des s\u00e9quences d\u2019essai/train.","title":"mlxtend.evaluate.paired_ttest_5x2cv(estimator1, estimator2, X, y, scoring=None, ran- dom_seed=None)"},{"location":"FR/function/#mlxtendpreprocessingstandardizearray","text":"Normaliser les colonnes dans les Pandas DataFrame (Tableau). Param\u00e8tre array : forme de tableau Pandas DataFrame.","title":"mlxtend.preprocessing.standardize(array)"},{"location":"FR/function/#mlxtendfeature_extractionlineardiscriminantanalysisn_discriminantsnone","text":"Classe d\u2019analyse du discriminant lin\u00e9aire. Param\u00e8tre n_discriminants : int Le nombre de discriminant pour la transformation.","title":"mlxtend.feature_extraction.LinearDiscriminantAnalysis(n_discriminants=None)"},{"location":"FR/function/#mlxtendfeature_extractionlineardiscriminantanalysisfitxy","text":"Entraine le mod\u00e8le LDA avec X. Param\u00e8tres X : forme de tableau Les valeurs d\u2019entrainement. y : forme de tableau Les valeurs cibles.","title":"mlxtend.feature_extraction.LinearDiscriminantAnalysis().fit(X,y)"},{"location":"FR/function/#mlxtendfeature_extractionlineardiscriminantanalysistransformx","text":"Application de la transformation lin\u00e9aire sur X. Param\u00e8tre X : forme de tableau Les valeurs d\u2019entrainement.","title":"mlxtend.feature_extraction.LinearDiscriminantAnalysis().transform(X)"},{"location":"FR/ide/","text":"Installation d'un IDE Vous pouvez installer un des deux IDE (Integrated Development Environment) suivants pour la suite du projet. Visual Studio Code est un IDE disponible sur Mac, Windows et Linux tandis que Spyder IDE n'est disponible que sur Mac et Windows. Visual Studio Code Windows - Mac T\u00e9l\u00e9chargez le fichier .exe (Windows) ou .dmg (Mac) disponible sur la page de Visual Studio Code . Ensuite il suffit d'ex\u00e9cuter le fichier .exe t\u00e9l\u00e9charg\u00e9 pr\u00e9c\u00e8demment. Suivez les instructions \u00e0 l'\u00e9cran pour l'installer. Une fois install\u00e9 vous pouvez le lancer et commencer \u00e0 coder. Linux - Ubuntu, Debian T\u00e9l\u00e9chargez le fichier .deb disponible sur la page de Visual Studio Code . Ensuite, ouvrez un Terminal, naviguez jusqu'au dossier o\u00f9 le fichier deb a \u00e9t\u00e9 t\u00e9l\u00e9charg\u00e9 (avec la commande cd ) et tapez la commande suivante : sudo dpkg -i nom_du_paquet_deb.deb #Remplacer nom_du_paquet_deb.deb par votre nom de paquet Spyder IDE Python (Windows - Mac) T\u00e9l\u00e9chargez le fichier .exe (Windows) ou .dmg (Mac) disponible sur la page de Spyder IDE . Ensuite il suffit d'ex\u00e9cuter le fichier .exe t\u00e9l\u00e9charg\u00e9 pr\u00e9c\u00e8demment. Suivez les instructions \u00e0 l'\u00e9cran pour l'installer. Une fois install\u00e9 vous pouvez le lancer et commencer \u00e0 coder.","title":"IDE"},{"location":"FR/ide/#installation-dun-ide","text":"Vous pouvez installer un des deux IDE (Integrated Development Environment) suivants pour la suite du projet. Visual Studio Code est un IDE disponible sur Mac, Windows et Linux tandis que Spyder IDE n'est disponible que sur Mac et Windows.","title":"Installation d'un IDE"},{"location":"FR/ide/#visual-studio-code","text":"","title":"Visual Studio Code"},{"location":"FR/ide/#windows-mac","text":"T\u00e9l\u00e9chargez le fichier .exe (Windows) ou .dmg (Mac) disponible sur la page de Visual Studio Code . Ensuite il suffit d'ex\u00e9cuter le fichier .exe t\u00e9l\u00e9charg\u00e9 pr\u00e9c\u00e8demment. Suivez les instructions \u00e0 l'\u00e9cran pour l'installer. Une fois install\u00e9 vous pouvez le lancer et commencer \u00e0 coder.","title":"Windows - Mac"},{"location":"FR/ide/#linux-ubuntu-debian","text":"T\u00e9l\u00e9chargez le fichier .deb disponible sur la page de Visual Studio Code . Ensuite, ouvrez un Terminal, naviguez jusqu'au dossier o\u00f9 le fichier deb a \u00e9t\u00e9 t\u00e9l\u00e9charg\u00e9 (avec la commande cd ) et tapez la commande suivante : sudo dpkg -i nom_du_paquet_deb.deb #Remplacer nom_du_paquet_deb.deb par votre nom de paquet","title":"Linux - Ubuntu, Debian"},{"location":"FR/ide/#spyder-ide-python-windows-mac","text":"T\u00e9l\u00e9chargez le fichier .exe (Windows) ou .dmg (Mac) disponible sur la page de Spyder IDE . Ensuite il suffit d'ex\u00e9cuter le fichier .exe t\u00e9l\u00e9charg\u00e9 pr\u00e9c\u00e8demment. Suivez les instructions \u00e0 l'\u00e9cran pour l'installer. Une fois install\u00e9 vous pouvez le lancer et commencer \u00e0 coder.","title":"Spyder IDE Python (Windows - Mac)"},{"location":"FR/launch/","text":"Le programme Lancement Pour lancer le programme, il suffit de se placer dans le dossier o\u00f9 se trouve le fichier main.py , ainsi vous pourrez lancer le programme avec la commande suivante : python3 main.py Le programme affichera des informations dans le Terminal et aussi gr\u00e2ce \u00e0 des fen\u00eatres cr\u00e9\u00e9es par matplotlib. Pour avancer dans le programme, il suffit de fermer chaque fen\u00eatre des repr\u00e9sentations qui apparaissent \u00e0 l\u2019\u00e9cran. Exemple de lancement du programme Vous trouverez pour chaque syst\u00e8me d'exploitation une vid\u00e9o de pr\u00e9sentation du programme lors de son fonctionnement. Windows 10 MacOS Linux (Ubuntu)","title":"Le programme"},{"location":"FR/launch/#le-programme","text":"","title":"Le programme"},{"location":"FR/launch/#lancement","text":"Pour lancer le programme, il suffit de se placer dans le dossier o\u00f9 se trouve le fichier main.py , ainsi vous pourrez lancer le programme avec la commande suivante : python3 main.py Le programme affichera des informations dans le Terminal et aussi gr\u00e2ce \u00e0 des fen\u00eatres cr\u00e9\u00e9es par matplotlib. Pour avancer dans le programme, il suffit de fermer chaque fen\u00eatre des repr\u00e9sentations qui apparaissent \u00e0 l\u2019\u00e9cran.","title":"Lancement"},{"location":"FR/launch/#exemple-de-lancement-du-programme","text":"Vous trouverez pour chaque syst\u00e8me d'exploitation une vid\u00e9o de pr\u00e9sentation du programme lors de son fonctionnement.","title":"Exemple de lancement du programme"},{"location":"FR/launch/#windows-10","text":"","title":"Windows 10"},{"location":"FR/launch/#macos","text":"","title":"MacOS"},{"location":"FR/launch/#linux-ubuntu","text":"","title":"Linux (Ubuntu)"},{"location":"FR/objectif/","text":"Objectifs Python est un langage de programmation tr\u00e8s populaire dans le monde informatique pour r\u00e9aliser des t\u00e2ches vari\u00e9es tel que l'automatisation, les sites internets, l'Intelligence Artificielle (IA), etc. Notre objectif est de comprendre en d\u00e9tail le code donn\u00e9 mais aussi le simplifier, en gardant uniquement les d\u00e9pendances utiles au projet. Cela nous permettra de r\u00e9aliser une documentation claire pour utiliser le script sur un ordinateur neuf et par une personne pas forc\u00e9ment form\u00e9e pour son utilisation. Dans un second temps, nous pourrons \u00e9largir ce code aux bases de donn\u00e9es disponibles sur le site kaggle .","title":"Objectifs"},{"location":"FR/objectif/#objectifs","text":"Python est un langage de programmation tr\u00e8s populaire dans le monde informatique pour r\u00e9aliser des t\u00e2ches vari\u00e9es tel que l'automatisation, les sites internets, l'Intelligence Artificielle (IA), etc. Notre objectif est de comprendre en d\u00e9tail le code donn\u00e9 mais aussi le simplifier, en gardant uniquement les d\u00e9pendances utiles au projet. Cela nous permettra de r\u00e9aliser une documentation claire pour utiliser le script sur un ordinateur neuf et par une personne pas forc\u00e9ment form\u00e9e pour son utilisation. Dans un second temps, nous pourrons \u00e9largir ce code aux bases de donn\u00e9es disponibles sur le site kaggle .","title":"Objectifs"},{"location":"FR/python/","text":"Installation de Python Ce projet fonctionne sur un environnement Python, et de pr\u00e9f\u00e9rence sur la version Python 3.8.0 (version v\u00e9rifi\u00e9e pour ce projet). Windows T\u00e9l\u00e9chargez le fichier ex\u00e9cutable sur le site officiel Python de la version Python 3.8.0. Ex\u00e9cutez le fichier .exe . Commencez par cocher les deux cases en bas sur la premi\u00e8re fen\u00eatre de dialogue, comme sur l'image qui suit. Allez dans les Advanced Options , cochez toutes les cases, permettant ainsi d'installer pip (un gestionnaire de paquets utiles par la suite), puis revenez en arri\u00e8re, et avancez jusqu'\u00e0 l'installation compl\u00e8te. \u00c0 la fin de l'ex\u00e9cution, Python est compl\u00e9tement install\u00e9 sur votre syst\u00e8me. Pour v\u00e9rifier que Python est bien install\u00e9, ouvrez un CMD et tapez la commande suivante : python --version #Vous devez obtenir le r\u00e9sultat suivant Python 3.8.0 Mac Deux m\u00e9thodes s'offrent \u00e0 vous, soit passant par le site officiel (m\u00e9thode simple) , soit en ligne de commandes avec Homebrew . 1\u00e8re m\u00e9thode : Site Officiel T\u00e9l\u00e9chargez le package sur le site officiel Python de la version Python 3.8.0. Ex\u00e9cutez le fichier .pkg et suivez les diff\u00e9rentes \u00e9tapes sur l'\u00e9cran. \u00c0 la fin de l'ex\u00e9cution, Python est compl\u00e9tement install\u00e9 sur votre syst\u00e8me. Pour v\u00e9rifier que Python est bien install\u00e9, ouvrez un Terminal et tapez la commande suivante : python --version #Vous devez obtenir le r\u00e9sultat suivant Python 3.8.0 2\u00e8me m\u00e9thode : Homebrew Pour installer Homebrew, ouvrez un Terminal et tapez la commande : /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" Puis installez Python avec la commande suivante : brew install python@3.8 \u00c0 la fin de l'ex\u00e9cution, Python est compl\u00e9tement install\u00e9 sur votre syst\u00e8me. Pour v\u00e9rifier que Python est bien install\u00e9, ouvrez un Terminal et tapez la commande suivante : python --version #Vous devez obtenir le r\u00e9sultat suivant Python 3.8.0 Linux Dans un Terminal, tapez la commande suivante : sudo apt-get install python3.8 Pour v\u00e9rifier que Python est bien install\u00e9, tapez la commande suivante : python --version #Vous devez obtenir le r\u00e9sultat suivant Python 3.8.0","title":"Python"},{"location":"FR/python/#installation-de-python","text":"Ce projet fonctionne sur un environnement Python, et de pr\u00e9f\u00e9rence sur la version Python 3.8.0 (version v\u00e9rifi\u00e9e pour ce projet).","title":"Installation de Python"},{"location":"FR/python/#windows","text":"T\u00e9l\u00e9chargez le fichier ex\u00e9cutable sur le site officiel Python de la version Python 3.8.0. Ex\u00e9cutez le fichier .exe . Commencez par cocher les deux cases en bas sur la premi\u00e8re fen\u00eatre de dialogue, comme sur l'image qui suit. Allez dans les Advanced Options , cochez toutes les cases, permettant ainsi d'installer pip (un gestionnaire de paquets utiles par la suite), puis revenez en arri\u00e8re, et avancez jusqu'\u00e0 l'installation compl\u00e8te. \u00c0 la fin de l'ex\u00e9cution, Python est compl\u00e9tement install\u00e9 sur votre syst\u00e8me. Pour v\u00e9rifier que Python est bien install\u00e9, ouvrez un CMD et tapez la commande suivante : python --version #Vous devez obtenir le r\u00e9sultat suivant Python 3.8.0","title":"Windows"},{"location":"FR/python/#mac","text":"Deux m\u00e9thodes s'offrent \u00e0 vous, soit passant par le site officiel (m\u00e9thode simple) , soit en ligne de commandes avec Homebrew .","title":"Mac"},{"location":"FR/python/#1ere-methode-site-officiel","text":"T\u00e9l\u00e9chargez le package sur le site officiel Python de la version Python 3.8.0. Ex\u00e9cutez le fichier .pkg et suivez les diff\u00e9rentes \u00e9tapes sur l'\u00e9cran. \u00c0 la fin de l'ex\u00e9cution, Python est compl\u00e9tement install\u00e9 sur votre syst\u00e8me. Pour v\u00e9rifier que Python est bien install\u00e9, ouvrez un Terminal et tapez la commande suivante : python --version #Vous devez obtenir le r\u00e9sultat suivant Python 3.8.0","title":"1\u00e8re m\u00e9thode : Site Officiel"},{"location":"FR/python/#2eme-methode-homebrew","text":"Pour installer Homebrew, ouvrez un Terminal et tapez la commande : /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" Puis installez Python avec la commande suivante : brew install python@3.8 \u00c0 la fin de l'ex\u00e9cution, Python est compl\u00e9tement install\u00e9 sur votre syst\u00e8me. Pour v\u00e9rifier que Python est bien install\u00e9, ouvrez un Terminal et tapez la commande suivante : python --version #Vous devez obtenir le r\u00e9sultat suivant Python 3.8.0","title":"2\u00e8me m\u00e9thode : Homebrew"},{"location":"FR/python/#linux","text":"Dans un Terminal, tapez la commande suivante : sudo apt-get install python3.8 Pour v\u00e9rifier que Python est bien install\u00e9, tapez la commande suivante : python --version #Vous devez obtenir le r\u00e9sultat suivant Python 3.8.0","title":"Linux"},{"location":"FR/sources/","text":"Sources Retrouver les documentations officielles des biblioth\u00e8ques utilis\u00e9es dans ce projet : - pandas - matplotlib - seaborn - numpy - mlxtend","title":"Sources"},{"location":"FR/sources/#sources","text":"Retrouver les documentations officielles des biblioth\u00e8ques utilis\u00e9es dans ce projet : - pandas - matplotlib - seaborn - numpy - mlxtend","title":"Sources"}]}