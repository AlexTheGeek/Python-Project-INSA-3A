{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the documentation of the Python Project 3A MRI English You will find on this site the complete documentation of the python project available on Github . For english documentation click here Fran\u00e7ais Vous trouverez sur ce site la documenation compl\u00e8te du projet python disponible sur Github . Pour la documentation en fran\u00e7ais, cliquez ici . Retrouvez aussi la documentation au format PDF . Group members Damien Briquet Alexis Brunet INSA CVL - 3A MRI","title":"Overview"},{"location":"#welcome-to-the-documentation-of-the-python-project-3a-mri","text":"","title":"Welcome to the documentation of the Python Project 3A MRI"},{"location":"#english","text":"You will find on this site the complete documentation of the python project available on Github . For english documentation click here","title":"English"},{"location":"#francais","text":"Vous trouverez sur ce site la documenation compl\u00e8te du projet python disponible sur Github . Pour la documentation en fran\u00e7ais, cliquez ici . Retrouvez aussi la documentation au format PDF .","title":"Fran\u00e7ais"},{"location":"#group-members","text":"Damien Briquet Alexis Brunet INSA CVL - 3A MRI","title":"Group members"},{"location":"about/","text":"About Members The group members are : - Damien Briquet - Alexis Brunet Contact For any questions, please contact us at this email address : contact[at]lapinfo[dot]ovh","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#members","text":"The group members are : - Damien Briquet - Alexis Brunet","title":"Members"},{"location":"about/#contact","text":"For any questions, please contact us at this email address : contact[at]lapinfo[dot]ovh","title":"Contact"},{"location":"EN/","text":"English documentation of the python project Contents Objectives Installing Python Windows Mac Linux Installing an IDE Windows Mac Linux Installation of dependencies Windows Mac Linux Code Explanation Sources","title":"Home"},{"location":"EN/#english-documentation-of-the-python-project","text":"","title":"English documentation of the python project"},{"location":"EN/#contents","text":"Objectives Installing Python Windows Mac Linux Installing an IDE Windows Mac Linux Installation of dependencies Windows Mac Linux Code Explanation Sources","title":"Contents"},{"location":"EN/code/","text":"","title":"Code Explanation"},{"location":"EN/dependances/","text":"Dependencies' installation You need to install several dependencies for the project to run smoothly. You need the following dependencies: - numpy is used to create and manipulate multi-dimensional tables and allows the use of mathematical functions in these tables. - pandas allows us to manipulate and analyse numerical data and time series. - seaborn is our interface for displaying results in the form of statistical graphs. - statsmodels brings together existing statistical mathematical models in order to make forecasts. - mlxtend is a learning machine module analysing data so that we can then develop and refine the forecasts. Windows You can install the depedencies either with Anaconda (method 1) , or with pip (method 2) . Method 1 : Anaconda This method is simpler because you will install Anaconda which will install some of the other dependencies (Numpy, Pandas) needed for the project. Download the latest version of Anaconda for Windows from the site . Run the .exe file, follow the instructions on the screen until the installation is complete. Then you will install the last required mlxtend dependency, so open an Anaconda Terminal by the Windows search tool by typing \"Anaconda Powershell Prompt\", and copy the following command: conda install mlxtend --channel conda-forge Now all the necessary outbuildings are installed. Method 2 : pip V\u00e9rifiez que pip est install\u00e9 avec la commande : pip -V S'il n'est pas install\u00e9, t\u00e9l\u00e9chargez le fichier python get-pip.py . Placez ce fichier python dans le dossier d'installation, le chemin d'acc\u00e8s \u00e0 ce dossier ressemble \u00e0 C:\\Users\\XXX\\AppData\\Local\\Programs\\Python\\Python-38\\ Python-38 correspond \u00e0 la version de votre Python, que vous pouvez connaitre en ouvrant un cmd et en tapant la commande python --version . XXX correspond \u00e0 votre nom d'utilisateur Windows. Ensuite ouvrez un cmd, et naviguez jusqu'\u00e0 ce dossier Python avec la commande cd C:\\Users\\XXXX\\AppData\\Local\\Programs\\Python\\Python-38\\ Puis ensuite ex\u00e9cutez le script : python get-pip.py Et voila ! pip est maintenant install\u00e9 sur votre syst\u00e8me. Vous pouvez v\u00e9rifier de nouveau avec la commande : pip -V Maintenant vous pouvez installer les d\u00e9pendances. Tout d'abord, t\u00e9l\u00e9chargez le zip du projet . D\u00e9zippez-le, ouvez un CMD et tapez les commandes suivantes : cd C:\\Users\\XXX\\Documents\\Projet-Python-INSA-3A #Par exemple, d\u00e9pend de l\u00e0 o\u00f9 vous l'avez mis, ici c'est dans les Documents pip install -r requirements.txt Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es. Mac Pour installer ces d\u00e9pendances, vous utiliserez pip un gestionnaire de paquets Python. Installez pip avec les commandes suivantes : curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py pip est normalement install\u00e9. Pour v\u00e9rifier, tapez : pip --version T\u00e9l\u00e9chargez le zip du projet \u00e0 cette adresse ou avec la commande suivante : curl -LJO https://github.com/AlexTheGeek/Python-Project-INSA-3A/archive/V0.1.1.zip Ouvrez un Terminal et tapez les commandes suivantes : unzip Python-Project-INSA-3A-v0.1.1.zip cd Project-Python-3A-MRI pip install -r requirements.txt Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es. Linux Pour installer les d\u00e9pendances, il faut que pip soit install\u00e9 sur votre syst\u00e8me : Sur Ubuntu pour installer pip, vous pouvez taper la commande suivante : sudo apt-get install python3-pip . Dans la suite vous utiliserez la commande pip mais en passant par le gestionnaire de paquets apt , pour cela il faudra taper la commande pip3 . curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py Pip est normalement install\u00e9. Pour v\u00e9rifier sa version, tapez : pip --version Maintenant vous pouvez installer les d\u00e9pendances. T\u00e9l\u00e9chargez le zip du projet \u00e0 cette adresse ou avec la commande suivante : curl -LJO https://github.com/AlexTheGeek/Python-Project-INSA-3A/archive/V0.1.1.zip Ouvrez un Terminal et tapez les commandes suivantes : unzip Python-Project-INSA-3A-v0.1.1.zip cd Project-Python-3A-MRI pip install -r requirements.txt Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es.","title":"Dependencies"},{"location":"EN/dependances/#dependencies-installation","text":"You need to install several dependencies for the project to run smoothly. You need the following dependencies: - numpy is used to create and manipulate multi-dimensional tables and allows the use of mathematical functions in these tables. - pandas allows us to manipulate and analyse numerical data and time series. - seaborn is our interface for displaying results in the form of statistical graphs. - statsmodels brings together existing statistical mathematical models in order to make forecasts. - mlxtend is a learning machine module analysing data so that we can then develop and refine the forecasts.","title":"Dependencies' installation"},{"location":"EN/dependances/#windows","text":"You can install the depedencies either with Anaconda (method 1) , or with pip (method 2) .","title":"Windows"},{"location":"EN/dependances/#method-1-anaconda","text":"This method is simpler because you will install Anaconda which will install some of the other dependencies (Numpy, Pandas) needed for the project. Download the latest version of Anaconda for Windows from the site . Run the .exe file, follow the instructions on the screen until the installation is complete. Then you will install the last required mlxtend dependency, so open an Anaconda Terminal by the Windows search tool by typing \"Anaconda Powershell Prompt\", and copy the following command: conda install mlxtend --channel conda-forge Now all the necessary outbuildings are installed.","title":"Method 1 : Anaconda"},{"location":"EN/dependances/#method-2-pip","text":"V\u00e9rifiez que pip est install\u00e9 avec la commande : pip -V S'il n'est pas install\u00e9, t\u00e9l\u00e9chargez le fichier python get-pip.py . Placez ce fichier python dans le dossier d'installation, le chemin d'acc\u00e8s \u00e0 ce dossier ressemble \u00e0 C:\\Users\\XXX\\AppData\\Local\\Programs\\Python\\Python-38\\ Python-38 correspond \u00e0 la version de votre Python, que vous pouvez connaitre en ouvrant un cmd et en tapant la commande python --version . XXX correspond \u00e0 votre nom d'utilisateur Windows. Ensuite ouvrez un cmd, et naviguez jusqu'\u00e0 ce dossier Python avec la commande cd C:\\Users\\XXXX\\AppData\\Local\\Programs\\Python\\Python-38\\ Puis ensuite ex\u00e9cutez le script : python get-pip.py Et voila ! pip est maintenant install\u00e9 sur votre syst\u00e8me. Vous pouvez v\u00e9rifier de nouveau avec la commande : pip -V Maintenant vous pouvez installer les d\u00e9pendances. Tout d'abord, t\u00e9l\u00e9chargez le zip du projet . D\u00e9zippez-le, ouvez un CMD et tapez les commandes suivantes : cd C:\\Users\\XXX\\Documents\\Projet-Python-INSA-3A #Par exemple, d\u00e9pend de l\u00e0 o\u00f9 vous l'avez mis, ici c'est dans les Documents pip install -r requirements.txt Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es.","title":"Method 2 : pip"},{"location":"EN/dependances/#mac","text":"Pour installer ces d\u00e9pendances, vous utiliserez pip un gestionnaire de paquets Python. Installez pip avec les commandes suivantes : curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py pip est normalement install\u00e9. Pour v\u00e9rifier, tapez : pip --version T\u00e9l\u00e9chargez le zip du projet \u00e0 cette adresse ou avec la commande suivante : curl -LJO https://github.com/AlexTheGeek/Python-Project-INSA-3A/archive/V0.1.1.zip Ouvrez un Terminal et tapez les commandes suivantes : unzip Python-Project-INSA-3A-v0.1.1.zip cd Project-Python-3A-MRI pip install -r requirements.txt Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es.","title":"Mac"},{"location":"EN/dependances/#linux","text":"Pour installer les d\u00e9pendances, il faut que pip soit install\u00e9 sur votre syst\u00e8me : Sur Ubuntu pour installer pip, vous pouvez taper la commande suivante : sudo apt-get install python3-pip . Dans la suite vous utiliserez la commande pip mais en passant par le gestionnaire de paquets apt , pour cela il faudra taper la commande pip3 . curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py Pip est normalement install\u00e9. Pour v\u00e9rifier sa version, tapez : pip --version Maintenant vous pouvez installer les d\u00e9pendances. T\u00e9l\u00e9chargez le zip du projet \u00e0 cette adresse ou avec la commande suivante : curl -LJO https://github.com/AlexTheGeek/Python-Project-INSA-3A/archive/V0.1.1.zip Ouvrez un Terminal et tapez les commandes suivantes : unzip Python-Project-INSA-3A-v0.1.1.zip cd Project-Python-3A-MRI pip install -r requirements.txt Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es.","title":"Linux"},{"location":"EN/ide/","text":"","title":"IDE"},{"location":"EN/objectif/","text":"Objectives Python is a very popular programming language in the IT world for carrying out various tasks such as automation, websites, Artificial Intelligence (AI), etc. Our objective is to understand the given code in detail but also to simplify it, keeping only the dependencies useful for the project. This will enable us to produce clear documentation to use the script on a new computer and by a person not necessarily trained for its use. In a second step, we will be able to extend this code to the databases available on the kaggle site .","title":"Objectives"},{"location":"EN/objectif/#objectives","text":"Python is a very popular programming language in the IT world for carrying out various tasks such as automation, websites, Artificial Intelligence (AI), etc. Our objective is to understand the given code in detail but also to simplify it, keeping only the dependencies useful for the project. This will enable us to produce clear documentation to use the script on a new computer and by a person not necessarily trained for its use. In a second step, we will be able to extend this code to the databases available on the kaggle site .","title":"Objectives"},{"location":"EN/python/","text":"Bienvenue sur le Wiki du Projet Python de 3A MRI de l'INSA CVL For the Documentation in English please follow this link Objectifs Python est un langage de programmation tr\u00e8s populaire dans le monde informatique pour r\u00e9aliser des t\u00e2ches vari\u00e9es tel que l'automatisation, les sites internets, l'Intelligence Artificielle (IA), etc. Notre objectif est de comprendre en d\u00e9tail le code donn\u00e9 mais aussi le simplifier, en gardant uniquement les d\u00e9pendances utiles au projet. Cela nous permettra de r\u00e9aliser une documentation claire pour utiliser le script sur un ordinateur neuf et par une personne pas forc\u00e9ment form\u00e9 pour son utilisation. Dans un second temps, nous pourrons \u00e9largir ce code aux bases de donn\u00e9es disponible sur le site kaggle . Membres du groupe Damien Briquet Alexis Brunet","title":"Python"},{"location":"EN/python/#bienvenue-sur-le-wiki-du-projet-python-de-3a-mri-de-linsa-cvl","text":"For the Documentation in English please follow this link","title":"Bienvenue sur le Wiki du Projet Python de 3A MRI de l'INSA CVL"},{"location":"EN/python/#objectifs","text":"Python est un langage de programmation tr\u00e8s populaire dans le monde informatique pour r\u00e9aliser des t\u00e2ches vari\u00e9es tel que l'automatisation, les sites internets, l'Intelligence Artificielle (IA), etc. Notre objectif est de comprendre en d\u00e9tail le code donn\u00e9 mais aussi le simplifier, en gardant uniquement les d\u00e9pendances utiles au projet. Cela nous permettra de r\u00e9aliser une documentation claire pour utiliser le script sur un ordinateur neuf et par une personne pas forc\u00e9ment form\u00e9 pour son utilisation. Dans un second temps, nous pourrons \u00e9largir ce code aux bases de donn\u00e9es disponible sur le site kaggle .","title":"Objectifs"},{"location":"EN/python/#membres-du-groupe","text":"Damien Briquet Alexis Brunet","title":"Membres du groupe"},{"location":"EN/sources/","text":"Sources Find the official documentation of the libraries used in this project: - pandas - matplotlib - searborn - numpy","title":"Sources"},{"location":"EN/sources/#sources","text":"Find the official documentation of the libraries used in this project: - pandas - matplotlib - searborn - numpy","title":"Sources"},{"location":"FR/","text":"Documentation fran\u00e7aise du projet python Sommaire Objectifs Installation de Python Windows Mac Linux Installation d'un IDE Windows Mac Linux Installation des d\u00e9pendances Windows Mac Linux Explications du code Sources","title":"Accueil"},{"location":"FR/#documentation-francaise-du-projet-python","text":"","title":"Documentation fran\u00e7aise du projet python"},{"location":"FR/#sommaire","text":"Objectifs Installation de Python Windows Mac Linux Installation d'un IDE Windows Mac Linux Installation des d\u00e9pendances Windows Mac Linux Explications du code Sources","title":"Sommaire"},{"location":"FR/code/","text":"Explication du Code Dans cette partie nous allons expliquer les diff\u00e9rentes actions faites par le programmes, par des blocs de lignes de code. Pour pr\u00e9senterons ainsi une sortie possible gr\u00e2ce \u00e0 ces lignes. Vous pouvez aussi retrouver le code complet annot\u00e9 \u00e0 \u00e0 cette adresse pour le main et la fonction . Tout d'abord notre programme est compos\u00e9 de deux scripts Python : - main.py : contenant le corps du programme (script python \u00e0 ex\u00e9cuter pour lancer le programme) - function.py : contenant la fonction utilis\u00e9 dans main.py Bloc 1 : initialisation d'un DataFram \u00e0 partir un fichier csv R\u00e9cup\u00e9ration des donn\u00e9es s\u00e9par\u00e9es par des virgules \u00e0 partir d'un fichier csv pour g\u00e9n\u00e9rer un \u00e9chantillon de mani\u00e8re al\u00e9atoire, et ainsi afficher des informations sur cet DataFrame (dimension, statistique, utilisatioon m\u00e9moire, valeurs non nulle, colonnes, index dtype, ...). dataset1 = pd.read_csv('weather.csv') #Lecture d'un fichier (csv) de valeurs separ\u00e9es par des virgules dans un DataFrame dataset1.sample() #G\u00e9n\u00e9ration d'un \u00e9chantillon al\u00e9atoires de chaque groupe d'un objet du DataFrame dataset=dataset1.sample(1000) #Un nouvel DataFrame (dataset) contenenant 1000 \u00e9l\u00e8ments echantillonn\u00e9s de fa\u00e7on al\u00e9atoire \u00e0 partir de dataset1 print(dataset.shape) #Affichage d'un tuple repr\u00e9sentant la dimension du DataFrame dataset print(dataset.describe()) #Affichage des statistiques pour chaque type de valeurs du DataFrame print(dataset.info()) #Affichage des informations sur le DataFrame, notamment l'index dtype et les colonnnes et les valeurs non nulles et l'utilisation de la m\u00e9moire Sortie possible : Bloc 2 : graphique en nuage de points de la r\u00e9partition des temp\u00e9ratures Affichage de la r\u00e9partition des temp\u00e9ratures en fonction des temp\u00e9ratures min et temp\u00e9ratures max, dans un graphique en nuage de points. dataset.plot(x='Temp_Min', y='Temp_Max', style='o') #Cr\u00e9ation d'un trace de DataFrame, avec l'axe x r\u00e9pr\u00e9sentant les Temp_min et l'axe y r\u00e9pr\u00e9sentant les Temp_Max, dans un style de nuge de points plt.title('Temp_Min vs Temp_Max') #Parametrage du titre du graphique plt.xlabel('Temp_Min') #Parametrage du titre de l'axe x plt.ylabel('Temp_Max') #Parametrage du titre de l'axe y plt.show() #Affichage du graphique/figure Sortie possible : Bloc 3 : graphique en histogramme de la r\u00e9partition des temp\u00e9ratures Max Cr\u00e9ation d'un graphique histogramme pour visualiser la r\u00e9partion des valeur de Temp_Max du DataFrame. plt.figure(figsize=(15,10)) #Cr\u00e9ation d'une figure de taille d\u00e9finie par figsize en inch soit ici 15 inch de largeur et 10 de hauteur plt.tight_layout() #Ajustement des bordures entre et autour les sous trace seabornInstance.distplot(dataset['Temp_Max']) #Permet de dessiner un trac\u00e9 de distribution sur une FacetGrid, permettant de visualiser les donn\u00e9es de DateFrame des Temp_Max dans un format d'histogramme (par d\u00e9faut) plt.show() #Affichage du graphique/figure Sortie possible : Bloc 4 : initialisation de la pr\u00e9diction Pr\u00e9diction des Temp_Max \u00e0 partir du fichier pr\u00e9c\u00e8dent. X = dataset['Temp_Min'].values.reshape(-1,1) #La valeur X inclut l'attribut Temp_Min y = dataset['Temp_Max'].values.reshape(-1,1) #La valeur y includ l'attribut Temp_Max X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) #Attribution de 80% des donnees a l'ensemble de formation et le reste a l'ensemble de test regressor = LinearRegression() #Creation un objet de regression lineaire regressor.fit(X_train, y_train) #Entrainement du model en utilisant l'ensemble de formation print(regressor.intercept_) #Affichage de l'intersection print(regressor.coef_) #Affichage du coefficient directeur de la droite de regression y_pred = regressor.predict(X_test) #Utilisation des donnees de test pour faire des predictions sur le Temp_Max df = pd.DataFrame({'Actuelle(Mesur\u00e9es)': y_test.flatten(), 'Pr\u00e9diction(mod\u00e8le)': y_pred.flatten()}) #Construction d'un DataFrame a partir des donnes predictes et de test print(df) #Affichage de DataFrame Sortie possible : Bloc 5 : graphique \u00e0 barre verticales de la r\u00e9partition des valeur pr\u00e9dites et mesur\u00e9es Cr\u00e9ation du graphique \u00e0 barre verticale montrant la r\u00e9partitions des temp\u00e9ratures mesur\u00e9es et pr\u00e9dites. df1 = df.head(25) #R\u00e9cup\u00e9ration des 25 derni\u00e8res lignes de df pour les mettre dans df1 df1.plot(kind='bar',figsize=(16,10)) #Cr\u00e9ation de DataFrame, de taille 16inch de largeur et 10inch de hauteur, et le style du graphique sera des barres verticales plt.grid(which='major', linestyle='-', linewidth='0.5', color='green') #Cr\u00e9ation de la grille interne (makor) du graphique avec un style de trait plein, epaisseur de 0.5points, une couleur verte plt.grid(which='minor', linestyle=':', linewidth='0.5', color='black') #Cr\u00e9ation du cadre(minor) du graphique avec un style de trait \u00e0 point, \u00e9paisseur de 0.5points, une couleur noire plt.show() #Affichage du graphique/figure Sortie possible : Bloc 6 : graphique de la droite de r\u00e9gression Cr\u00e9ation d'un graphique de dispersion en gris avec la droite de r\u00e9gr\u00e9ssion en rouge calcul\u00e9e pr\u00e9c\u00e8demment plt.title('Mod\u00e8le ax+y') #Param\u00e9trage du titre du graphique plt.xlabel('Temp_Min') #Param\u00e9trage du titre de l'axe x plt.ylabel('Temp_Max') #Param\u00e9trage du titre de l'axe y plt.scatter(X_test, y_test, color='gray') #Cr\u00e9ation d'un diagramme de dispersion y_test contre X_test de couleur grise plt.plot(X_test, y_pred, color='red', linewidth=2) #Cr\u00e9ation d'un trace (de la fonction ax+y) de DataFrame, avec l'axe x r\u00e9pr\u00e9sentant les X_Test et l'axe y r\u00e9pr\u00e9sentant les y_pred, dans la couleur rouge et de largeur 2points plt.show() #Affichage du graphique/figure Sortie possible : Bloc 7 : Quelques valeurs de la pr\u00e9diction Affiche des valeurs en fonction des pr\u00e9dictions print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred)) #Affichage du calcul des valeurs absolues moyennes des erreurs print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred)) #Affichage du calcul de la moyenne des erreurs au carr\u00e9 print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred))) #Affichage du calcul de la racine carr\u00e9e de la moyenne des erreurs quadratiques Sortie possible : Bloc 8 : Statistique d'un tableau de moyenne Ajout des valeurs moyenne dans un tableau et affichage de ce tableau et des valeurs moyennes et \u00e9cart-type. Means = [] #Cr\u00e9ation d'un tableau vide des valeurs moyennes Means=testSamples(200, 100,dataset['Temp_Min']) #Ajout des valeurs moyenne dans le tableau avec la fonction testSamples cr\u00e9\u00e9e pr\u00e9c\u00e8demment print(Means) #Affichage du tableau des valeurs moyennes print(np.mean(Means)) #Affichage de la moyenne du tableau Means print(np.mean(dataset['Temp_Min'])) #Affichage de la moyenne du tableau dataset['Temp_Min'] print(np.std(Means)) #Affiche l'\u00e9cart-type des valeurs du tableau Means print(np.std(dataset['Temp_Min'])) #Affiche l'\u00e9cart-type des valeurs du tableau dataset['Temp_Min'] Bloc de la fonction associ\u00e9 class fonction: #Creation de la classe fonction pour toutes les fonctions utilisables pour temp.py def testSamples(numTrials, sampleSize, data): #Definition de la fonction testsamples prenant en parametre numTrials (int), sampleSize (int), data (tableau de float) Means = [] #Creation d'un tableau vide for t in range(numTrials): #Boucle for commen\u00e7ant de 0 allant a numTrials-1 par pas de 1 Y=data.sample(sampleSize) #Y recupere un echantillon aleatoire d'elements a partir de SampleSize Means.append(sum(Y)/len(Y)) #Ajout dans le tabelau de la division de la somme de Y divise par la longuer de Y return Means #On retourne le tableau Means Sortie possible : Bloc 9 : Diagramme en escalier Cr\u00e9ation d'un histogramme en escalier. plt.figure(1) #Cr\u00e9ation d'un figure avec un unique identifiant \u00e9gale \u00e0 1 plt.hist(Means, bins=int(10), histtype='step') #Cr\u00e9ation d'un histogramme en escalier avec un seul trait et sans remplissage, avec 10 marches ayant la meme largeur plt.show() #Affichage du graphique/figure Sortie possible : Bloc 10 : Test de Shapiro-Wilk Test de Shapiro-Wilk sur une population distribu\u00e9e normalement. stat, p = stats.shapiro(Means) #On fait le test de Shapiro-Wilk qui v\u00e9rifie l'hypothese nulle selon les donn\u00e9es de Means, et retourne la valeur de la statistique du test et la p-value pour l'hypoth\u00e9se du test print('Statistics={}, p={}'.format(stat, p)) #Affichage de la statistique et de la p-value alpha = 0.05 #Iniatialisation de alpha if p > alpha: #Test entre p-value et alpha print('Sample looks Normal (do not reject H0)') #Affichage si p-value > alpha else: print('Sample does not look Normal (reject H0)') #Affichage si p-value < alpha Sortie possible : Bloc 11 : Boite \u00e0 moustache Diagramme en boites et en moutaches. La bo\u00eete s'\u00e9tend des valeurs du quartile inf\u00e9rieur au quartile sup\u00e9rieur des donn\u00e9es, avec une ligne \u00e0 la m\u00e9diane. Les moustaches s'\u00e9tendent \u00e0 partir de la bo\u00eete pour montrer l'\u00e9tendue des donn\u00e9es. Les points de vol sont ceux qui se trouvent apr\u00e8s l'extr\u00e9mit\u00e9 des moustaches. plt.boxplot(Means) #Cr\u00e9ation d'un diagramme en boites et en moutaches de Means plt.show() #Affichage du graphique/figure Sortie possible : Bloc 12 : Courbe de probabilit\u00e9 Cr\u00e9ation et affichage de la courbe de probabilit\u00e9 stats.probplot(Means, dist=\"norm\", plot=pylab) #Calcule les quantiles de la courbe de probabilit\u00e9 normale de Means et la trace avec pylab pylab.show() #Affichage du graphique/figure Sortie possible : Bloc 13 : Coefficient de regression Ecriture par deux mani\u00e8res diff\u00e9rentes du calcul du coefficient de regression lin\u00e9aire. X, y = make_classification(n_samples=100, n_features=10, n_informative=10, n_redundant=0, random_state=1) #param\u00e8trage du nuage de points model1 = LogisticRegression() #initialisation de l'\u00e9valuation du mod\u00e8le 1 par la fonction LogisticRegression() cv1 = RepeatedStratifiedKFold(n_splits=2, n_repeats=5, random_state=1) #Param\u00e9trage de la variable cv1 scores1 = cross_val_score(model1, X, y, scoring='accuracy', cv=cv1, n_jobs=-1) #Param\u00e9trage de la variable scores1 print('LogisticRegression Mean Accuracy: %.3f (%.3f)' % (np.mean(scores1), np.std(scores1))) #affichage du coefficient de regression lin\u00e9aire moyen pour le mod\u00e8le 1 # evaluate model 2 model2 = LinearDiscriminantAnalysis() #initialisation de l'\u00e9valuation du mod\u00e8le 2 par la fonction cv2 = RepeatedStratifiedKFold(n_splits=2, n_repeats=5, random_state=1) #Param\u00e9trage de la variable cv2 scores2 = cross_val_score(model2, X, y, scoring='accuracy', cv=cv2, n_jobs=-1) #Param\u00e9trage de la variable scores2 print('LinearDiscriminantAnalysis Mean Accuracy: %.3f (%.3f)' % (np.mean(scores2), np.std(scores2))) #affichage du coefficient de regression lin\u00e9aire moyen pour le mod\u00e8le 2 Sortie possible : Bloc 14 : Diagramme boite \u00e0 moustaches Cr\u00e9ation du diagramme boite \u00e0 moustaches plt.boxplot([scores1, scores2], labels=['LR', 'LDA'], showmeans=True) #Creation d'un diagramme boite \u00e0 moustaches \u00e0 partir de scores1 et scores2 plt.show() #Affichage du graphique/figure Sortie possible : Bloc 15 : Test entre les deux mod\u00e8les D\u00e9termination de la P-value et de T-stastitic pour faire un test entre les deux mod\u00e8les t, p = paired_ttest_5x2cv(estimator1=model1, estimator2=model2, X=X, y=y, scoring='accuracy', random_seed=1) #initialisation du couple de valeur t et p print('P-value: %.3f, t-Statistic: %.3f' % (p, t)) #affichage de la p-Value et de t-Statistic initialis\u00e9 ci-dessus if p <= 0.05: #test de la valeur de la variable p print('Difference between mean performance is probably real') #affichage si p<=0.05 else: print('Algorithms probably have the same performance') #affichage si p>0.05 Sortie possible : Bloc 16 : Discriminant Analyse du discriminant X = standardize(X) #Lissage de la variable X lda = lda(n_discriminants=2) #initialisation du discriminant lda.fit(X, y) #Entrainement du mod\u00e8le en utilisant l'ensemble de formation X_lda = lda.transform(X) #Transforme les valeurs pour qu'elles soient utilisable par les fonctions d'apr\u00e8s plt.figure(figsize=(6, 4)) #Creation d'un figure avec une certaine taille pr\u00e9cis\u00e9 en argument for lab, col in zip((0, 1),('blue', 'red')): #boucle pour tracer le nuage de point en fonction de la ligne et de la colonne plt.scatter(X_lda[y == lab, 0],X_lda[y == lab, 1],label=lab,c=col) #tracage du nuage de point plt.xlabel('Linear Discriminant 1') #Param\u00e8trage du titre de l'axe X plt.ylabel('Linear Discriminant 2') #Param\u00e8trage du titre de l'axe Y plt.legend(loc='lower right') #Param\u00e8trage de la l\u00e9gende situ\u00e9e en bas \u00e0 droite plt.tight_layout() #Ajustement des bordures entre et autour les sous traces plt.show() #Affichage du graphique/figure Sortie possible :","title":"Explication du code"},{"location":"FR/code/#explication-du-code","text":"Dans cette partie nous allons expliquer les diff\u00e9rentes actions faites par le programmes, par des blocs de lignes de code. Pour pr\u00e9senterons ainsi une sortie possible gr\u00e2ce \u00e0 ces lignes. Vous pouvez aussi retrouver le code complet annot\u00e9 \u00e0 \u00e0 cette adresse pour le main et la fonction . Tout d'abord notre programme est compos\u00e9 de deux scripts Python : - main.py : contenant le corps du programme (script python \u00e0 ex\u00e9cuter pour lancer le programme) - function.py : contenant la fonction utilis\u00e9 dans main.py","title":"Explication du Code"},{"location":"FR/code/#bloc-1-initialisation-dun-datafram-a-partir-un-fichier-csv","text":"R\u00e9cup\u00e9ration des donn\u00e9es s\u00e9par\u00e9es par des virgules \u00e0 partir d'un fichier csv pour g\u00e9n\u00e9rer un \u00e9chantillon de mani\u00e8re al\u00e9atoire, et ainsi afficher des informations sur cet DataFrame (dimension, statistique, utilisatioon m\u00e9moire, valeurs non nulle, colonnes, index dtype, ...). dataset1 = pd.read_csv('weather.csv') #Lecture d'un fichier (csv) de valeurs separ\u00e9es par des virgules dans un DataFrame dataset1.sample() #G\u00e9n\u00e9ration d'un \u00e9chantillon al\u00e9atoires de chaque groupe d'un objet du DataFrame dataset=dataset1.sample(1000) #Un nouvel DataFrame (dataset) contenenant 1000 \u00e9l\u00e8ments echantillonn\u00e9s de fa\u00e7on al\u00e9atoire \u00e0 partir de dataset1 print(dataset.shape) #Affichage d'un tuple repr\u00e9sentant la dimension du DataFrame dataset print(dataset.describe()) #Affichage des statistiques pour chaque type de valeurs du DataFrame print(dataset.info()) #Affichage des informations sur le DataFrame, notamment l'index dtype et les colonnnes et les valeurs non nulles et l'utilisation de la m\u00e9moire Sortie possible :","title":"Bloc 1 : initialisation d'un DataFram \u00e0 partir un fichier csv"},{"location":"FR/code/#bloc-2-graphique-en-nuage-de-points-de-la-repartition-des-temperatures","text":"Affichage de la r\u00e9partition des temp\u00e9ratures en fonction des temp\u00e9ratures min et temp\u00e9ratures max, dans un graphique en nuage de points. dataset.plot(x='Temp_Min', y='Temp_Max', style='o') #Cr\u00e9ation d'un trace de DataFrame, avec l'axe x r\u00e9pr\u00e9sentant les Temp_min et l'axe y r\u00e9pr\u00e9sentant les Temp_Max, dans un style de nuge de points plt.title('Temp_Min vs Temp_Max') #Parametrage du titre du graphique plt.xlabel('Temp_Min') #Parametrage du titre de l'axe x plt.ylabel('Temp_Max') #Parametrage du titre de l'axe y plt.show() #Affichage du graphique/figure Sortie possible :","title":"Bloc 2 : graphique en nuage de points de la r\u00e9partition des temp\u00e9ratures"},{"location":"FR/code/#bloc-3-graphique-en-histogramme-de-la-repartition-des-temperatures-max","text":"Cr\u00e9ation d'un graphique histogramme pour visualiser la r\u00e9partion des valeur de Temp_Max du DataFrame. plt.figure(figsize=(15,10)) #Cr\u00e9ation d'une figure de taille d\u00e9finie par figsize en inch soit ici 15 inch de largeur et 10 de hauteur plt.tight_layout() #Ajustement des bordures entre et autour les sous trace seabornInstance.distplot(dataset['Temp_Max']) #Permet de dessiner un trac\u00e9 de distribution sur une FacetGrid, permettant de visualiser les donn\u00e9es de DateFrame des Temp_Max dans un format d'histogramme (par d\u00e9faut) plt.show() #Affichage du graphique/figure Sortie possible :","title":"Bloc 3 : graphique en histogramme de la r\u00e9partition des temp\u00e9ratures Max"},{"location":"FR/code/#bloc-4-initialisation-de-la-prediction","text":"Pr\u00e9diction des Temp_Max \u00e0 partir du fichier pr\u00e9c\u00e8dent. X = dataset['Temp_Min'].values.reshape(-1,1) #La valeur X inclut l'attribut Temp_Min y = dataset['Temp_Max'].values.reshape(-1,1) #La valeur y includ l'attribut Temp_Max X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) #Attribution de 80% des donnees a l'ensemble de formation et le reste a l'ensemble de test regressor = LinearRegression() #Creation un objet de regression lineaire regressor.fit(X_train, y_train) #Entrainement du model en utilisant l'ensemble de formation print(regressor.intercept_) #Affichage de l'intersection print(regressor.coef_) #Affichage du coefficient directeur de la droite de regression y_pred = regressor.predict(X_test) #Utilisation des donnees de test pour faire des predictions sur le Temp_Max df = pd.DataFrame({'Actuelle(Mesur\u00e9es)': y_test.flatten(), 'Pr\u00e9diction(mod\u00e8le)': y_pred.flatten()}) #Construction d'un DataFrame a partir des donnes predictes et de test print(df) #Affichage de DataFrame Sortie possible :","title":"Bloc 4 : initialisation de la pr\u00e9diction"},{"location":"FR/code/#bloc-5-graphique-a-barre-verticales-de-la-repartition-des-valeur-predites-et-mesurees","text":"Cr\u00e9ation du graphique \u00e0 barre verticale montrant la r\u00e9partitions des temp\u00e9ratures mesur\u00e9es et pr\u00e9dites. df1 = df.head(25) #R\u00e9cup\u00e9ration des 25 derni\u00e8res lignes de df pour les mettre dans df1 df1.plot(kind='bar',figsize=(16,10)) #Cr\u00e9ation de DataFrame, de taille 16inch de largeur et 10inch de hauteur, et le style du graphique sera des barres verticales plt.grid(which='major', linestyle='-', linewidth='0.5', color='green') #Cr\u00e9ation de la grille interne (makor) du graphique avec un style de trait plein, epaisseur de 0.5points, une couleur verte plt.grid(which='minor', linestyle=':', linewidth='0.5', color='black') #Cr\u00e9ation du cadre(minor) du graphique avec un style de trait \u00e0 point, \u00e9paisseur de 0.5points, une couleur noire plt.show() #Affichage du graphique/figure Sortie possible :","title":"Bloc 5 : graphique \u00e0 barre verticales de la r\u00e9partition des valeur pr\u00e9dites et mesur\u00e9es"},{"location":"FR/code/#bloc-6-graphique-de-la-droite-de-regression","text":"Cr\u00e9ation d'un graphique de dispersion en gris avec la droite de r\u00e9gr\u00e9ssion en rouge calcul\u00e9e pr\u00e9c\u00e8demment plt.title('Mod\u00e8le ax+y') #Param\u00e9trage du titre du graphique plt.xlabel('Temp_Min') #Param\u00e9trage du titre de l'axe x plt.ylabel('Temp_Max') #Param\u00e9trage du titre de l'axe y plt.scatter(X_test, y_test, color='gray') #Cr\u00e9ation d'un diagramme de dispersion y_test contre X_test de couleur grise plt.plot(X_test, y_pred, color='red', linewidth=2) #Cr\u00e9ation d'un trace (de la fonction ax+y) de DataFrame, avec l'axe x r\u00e9pr\u00e9sentant les X_Test et l'axe y r\u00e9pr\u00e9sentant les y_pred, dans la couleur rouge et de largeur 2points plt.show() #Affichage du graphique/figure Sortie possible :","title":"Bloc 6 : graphique de la droite de r\u00e9gression"},{"location":"FR/code/#bloc-7-quelques-valeurs-de-la-prediction","text":"Affiche des valeurs en fonction des pr\u00e9dictions print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred)) #Affichage du calcul des valeurs absolues moyennes des erreurs print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred)) #Affichage du calcul de la moyenne des erreurs au carr\u00e9 print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred))) #Affichage du calcul de la racine carr\u00e9e de la moyenne des erreurs quadratiques Sortie possible :","title":"Bloc 7 : Quelques valeurs de la pr\u00e9diction"},{"location":"FR/code/#bloc-8-statistique-dun-tableau-de-moyenne","text":"Ajout des valeurs moyenne dans un tableau et affichage de ce tableau et des valeurs moyennes et \u00e9cart-type. Means = [] #Cr\u00e9ation d'un tableau vide des valeurs moyennes Means=testSamples(200, 100,dataset['Temp_Min']) #Ajout des valeurs moyenne dans le tableau avec la fonction testSamples cr\u00e9\u00e9e pr\u00e9c\u00e8demment print(Means) #Affichage du tableau des valeurs moyennes print(np.mean(Means)) #Affichage de la moyenne du tableau Means print(np.mean(dataset['Temp_Min'])) #Affichage de la moyenne du tableau dataset['Temp_Min'] print(np.std(Means)) #Affiche l'\u00e9cart-type des valeurs du tableau Means print(np.std(dataset['Temp_Min'])) #Affiche l'\u00e9cart-type des valeurs du tableau dataset['Temp_Min']","title":"Bloc 8 : Statistique d'un tableau de moyenne"},{"location":"FR/code/#bloc-de-la-fonction-associe","text":"class fonction: #Creation de la classe fonction pour toutes les fonctions utilisables pour temp.py def testSamples(numTrials, sampleSize, data): #Definition de la fonction testsamples prenant en parametre numTrials (int), sampleSize (int), data (tableau de float) Means = [] #Creation d'un tableau vide for t in range(numTrials): #Boucle for commen\u00e7ant de 0 allant a numTrials-1 par pas de 1 Y=data.sample(sampleSize) #Y recupere un echantillon aleatoire d'elements a partir de SampleSize Means.append(sum(Y)/len(Y)) #Ajout dans le tabelau de la division de la somme de Y divise par la longuer de Y return Means #On retourne le tableau Means Sortie possible :","title":"Bloc de la fonction associ\u00e9"},{"location":"FR/code/#bloc-9-diagramme-en-escalier","text":"Cr\u00e9ation d'un histogramme en escalier. plt.figure(1) #Cr\u00e9ation d'un figure avec un unique identifiant \u00e9gale \u00e0 1 plt.hist(Means, bins=int(10), histtype='step') #Cr\u00e9ation d'un histogramme en escalier avec un seul trait et sans remplissage, avec 10 marches ayant la meme largeur plt.show() #Affichage du graphique/figure Sortie possible :","title":"Bloc 9 : Diagramme en escalier"},{"location":"FR/code/#bloc-10-test-de-shapiro-wilk","text":"Test de Shapiro-Wilk sur une population distribu\u00e9e normalement. stat, p = stats.shapiro(Means) #On fait le test de Shapiro-Wilk qui v\u00e9rifie l'hypothese nulle selon les donn\u00e9es de Means, et retourne la valeur de la statistique du test et la p-value pour l'hypoth\u00e9se du test print('Statistics={}, p={}'.format(stat, p)) #Affichage de la statistique et de la p-value alpha = 0.05 #Iniatialisation de alpha if p > alpha: #Test entre p-value et alpha print('Sample looks Normal (do not reject H0)') #Affichage si p-value > alpha else: print('Sample does not look Normal (reject H0)') #Affichage si p-value < alpha Sortie possible :","title":"Bloc 10 : Test de Shapiro-Wilk"},{"location":"FR/code/#bloc-11-boite-a-moustache","text":"Diagramme en boites et en moutaches. La bo\u00eete s'\u00e9tend des valeurs du quartile inf\u00e9rieur au quartile sup\u00e9rieur des donn\u00e9es, avec une ligne \u00e0 la m\u00e9diane. Les moustaches s'\u00e9tendent \u00e0 partir de la bo\u00eete pour montrer l'\u00e9tendue des donn\u00e9es. Les points de vol sont ceux qui se trouvent apr\u00e8s l'extr\u00e9mit\u00e9 des moustaches. plt.boxplot(Means) #Cr\u00e9ation d'un diagramme en boites et en moutaches de Means plt.show() #Affichage du graphique/figure Sortie possible :","title":"Bloc 11 : Boite \u00e0 moustache"},{"location":"FR/code/#bloc-12-courbe-de-probabilite","text":"Cr\u00e9ation et affichage de la courbe de probabilit\u00e9 stats.probplot(Means, dist=\"norm\", plot=pylab) #Calcule les quantiles de la courbe de probabilit\u00e9 normale de Means et la trace avec pylab pylab.show() #Affichage du graphique/figure Sortie possible :","title":"Bloc 12 : Courbe de probabilit\u00e9"},{"location":"FR/code/#bloc-13-coefficient-de-regression","text":"Ecriture par deux mani\u00e8res diff\u00e9rentes du calcul du coefficient de regression lin\u00e9aire. X, y = make_classification(n_samples=100, n_features=10, n_informative=10, n_redundant=0, random_state=1) #param\u00e8trage du nuage de points model1 = LogisticRegression() #initialisation de l'\u00e9valuation du mod\u00e8le 1 par la fonction LogisticRegression() cv1 = RepeatedStratifiedKFold(n_splits=2, n_repeats=5, random_state=1) #Param\u00e9trage de la variable cv1 scores1 = cross_val_score(model1, X, y, scoring='accuracy', cv=cv1, n_jobs=-1) #Param\u00e9trage de la variable scores1 print('LogisticRegression Mean Accuracy: %.3f (%.3f)' % (np.mean(scores1), np.std(scores1))) #affichage du coefficient de regression lin\u00e9aire moyen pour le mod\u00e8le 1 # evaluate model 2 model2 = LinearDiscriminantAnalysis() #initialisation de l'\u00e9valuation du mod\u00e8le 2 par la fonction cv2 = RepeatedStratifiedKFold(n_splits=2, n_repeats=5, random_state=1) #Param\u00e9trage de la variable cv2 scores2 = cross_val_score(model2, X, y, scoring='accuracy', cv=cv2, n_jobs=-1) #Param\u00e9trage de la variable scores2 print('LinearDiscriminantAnalysis Mean Accuracy: %.3f (%.3f)' % (np.mean(scores2), np.std(scores2))) #affichage du coefficient de regression lin\u00e9aire moyen pour le mod\u00e8le 2 Sortie possible :","title":"Bloc 13 : Coefficient de regression"},{"location":"FR/code/#bloc-14-diagramme-boite-a-moustaches","text":"Cr\u00e9ation du diagramme boite \u00e0 moustaches plt.boxplot([scores1, scores2], labels=['LR', 'LDA'], showmeans=True) #Creation d'un diagramme boite \u00e0 moustaches \u00e0 partir de scores1 et scores2 plt.show() #Affichage du graphique/figure Sortie possible :","title":"Bloc 14 : Diagramme boite \u00e0 moustaches"},{"location":"FR/code/#bloc-15-test-entre-les-deux-modeles","text":"D\u00e9termination de la P-value et de T-stastitic pour faire un test entre les deux mod\u00e8les t, p = paired_ttest_5x2cv(estimator1=model1, estimator2=model2, X=X, y=y, scoring='accuracy', random_seed=1) #initialisation du couple de valeur t et p print('P-value: %.3f, t-Statistic: %.3f' % (p, t)) #affichage de la p-Value et de t-Statistic initialis\u00e9 ci-dessus if p <= 0.05: #test de la valeur de la variable p print('Difference between mean performance is probably real') #affichage si p<=0.05 else: print('Algorithms probably have the same performance') #affichage si p>0.05 Sortie possible :","title":"Bloc 15 : Test entre les deux mod\u00e8les"},{"location":"FR/code/#bloc-16-discriminant","text":"Analyse du discriminant X = standardize(X) #Lissage de la variable X lda = lda(n_discriminants=2) #initialisation du discriminant lda.fit(X, y) #Entrainement du mod\u00e8le en utilisant l'ensemble de formation X_lda = lda.transform(X) #Transforme les valeurs pour qu'elles soient utilisable par les fonctions d'apr\u00e8s plt.figure(figsize=(6, 4)) #Creation d'un figure avec une certaine taille pr\u00e9cis\u00e9 en argument for lab, col in zip((0, 1),('blue', 'red')): #boucle pour tracer le nuage de point en fonction de la ligne et de la colonne plt.scatter(X_lda[y == lab, 0],X_lda[y == lab, 1],label=lab,c=col) #tracage du nuage de point plt.xlabel('Linear Discriminant 1') #Param\u00e8trage du titre de l'axe X plt.ylabel('Linear Discriminant 2') #Param\u00e8trage du titre de l'axe Y plt.legend(loc='lower right') #Param\u00e8trage de la l\u00e9gende situ\u00e9e en bas \u00e0 droite plt.tight_layout() #Ajustement des bordures entre et autour les sous traces plt.show() #Affichage du graphique/figure Sortie possible :","title":"Bloc 16 : Discriminant"},{"location":"FR/dependances/","text":"Installation des d\u00e9pendances Pour le bon fonctionnement du projet, vous avez besoin d'installer plusieurs d\u00e9pendances. Vous avez besoin des d\u00e9pendances suivantes : - numpy sert \u00e0 cr\u00e9er et manipuler des tableaux multidimensionnels et permet l'utilisation de fonctions math\u00e9matiques dans les dits tableaux. - pandas nous permet la manipulation et l'analyse de donn\u00e9es num\u00e9riques et de s\u00e9ries temporelles. - seaborn nous sert d'interface permettant d'afficher les r\u00e9sultats sous forme de graphiques statistiques. - statsmodels regroupe les mod\u00e8les math\u00e9matiques statistiques existants afin de faire des pr\u00e9visions. - mlxtend est un module de machine learning analysant les donn\u00e9es pour pouvoir ensuite se d\u00e9velopper et affiner les pr\u00e9visions. Windows Vous pouvez installer les d\u00e9pendances soit avec Anaconda (m\u00e9thode 1) , soit avec pip (m\u00e9thode 2) . M\u00e9thode 1 : Anaconda Cette m\u00e9thode est plus simple, car vous allez installer Anaconda qui installera une partie des autres d\u00e9pendances (Numpy, Pandas) n\u00e9cessaires au projet. T\u00e9l\u00e9chargez la derni\u00e8re version de Anaconda pour Windows sur le site . Ex\u00e9cutez le fichier .exe , suivez les instructions qui apparaissent \u00e0 l'\u00e9cran jusqu'\u00e0 terminer l'installation. Ensuite vous allez installer la derni\u00e8re d\u00e9pendance n\u00e9cessaire mlxtend, donc ouvrir un Terminal d'Anaconda par l'outil de recherche Windows en tapant \"Anaconda Powershell Prompt\", et copiez la commande suivante : conda install mlxtend --channel conda-forge Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es. M\u00e9thode 2 : pip V\u00e9rifiez que pip est install\u00e9 avec la commande : pip -V S'il n'est pas install\u00e9, t\u00e9l\u00e9chargez le fichier python get-pip.py . Placez ce fichier python dans le dossier d'installation, le chemin d'acc\u00e8s \u00e0 ce dossier ressemble \u00e0 C:\\Users\\XXX\\AppData\\Local\\Programs\\Python\\Python-38\\ Python-38 correspond \u00e0 la version de votre Python, que vous pouvez connaitre en ouvrant un cmd et en tapant la commande python --version . XXX correspond \u00e0 votre nom d'utilisateur Windows. Ensuite ouvrez un cmd, et naviguez jusqu'\u00e0 ce dossier Python avec la commande cd C:\\Users\\XXXX\\AppData\\Local\\Programs\\Python\\Python-38\\ Puis ensuite ex\u00e9cutez le script : python get-pip.py Et voila ! pip est maintenant install\u00e9 sur votre syst\u00e8me. Vous pouvez v\u00e9rifier de nouveau avec la commande : pip -V Maintenant vous pouvez installer les d\u00e9pendances. Tout d'abord, t\u00e9l\u00e9chargez le zip du projet . D\u00e9zippez-le, ouvez un CMD et tapez les commandes suivantes : cd C:\\Users\\XXX\\Documents\\Projet-Python-INSA-3A #Par exemple, d\u00e9pend de l\u00e0 o\u00f9 vous l'avez mis, ici c'est dans les Documents pip install -r requirements.txt Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es. Mac Pour installer ces d\u00e9pendances, vous utiliserez pip un gestionnaire de paquets Python. Installez pip avec les commandes suivantes : curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py pip est normalement install\u00e9. Pour v\u00e9rifier, tapez : pip --version T\u00e9l\u00e9chargez le zip du projet \u00e0 cette adresse ou avec la commande suivante : curl -LJO https://github.com/AlexTheGeek/Python-Project-INSA-3A/archive/V0.1.1.zip Ouvrez un Terminal et tapez les commandes suivantes : unzip Python-Project-INSA-3A-v0.1.1.zip cd Project-Python-3A-MRI pip install -r requirements.txt Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es. Linux Pour installer les d\u00e9pendances, il faut que pip soit install\u00e9 sur votre syst\u00e8me : Sur Ubuntu pour installer pip, vous pouvez taper la commande suivante : sudo apt-get install python3-pip . Dans la suite vous utiliserez la commande pip mais en passant par le gestionnaire de paquets apt , pour cela il faudra taper la commande pip3 . curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py Pip est normalement install\u00e9. Pour v\u00e9rifier sa version, tapez : pip --version Maintenant vous pouvez installer les d\u00e9pendances. T\u00e9l\u00e9chargez le zip du projet \u00e0 cette adresse ou avec la commande suivante : curl -LJO https://github.com/AlexTheGeek/Python-Project-INSA-3A/archive/V0.1.1.zip Ouvrez un Terminal et tapez les commandes suivantes : unzip Python-Project-INSA-3A-v0.1.1.zip cd Project-Python-3A-MRI pip install -r requirements.txt Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es.","title":"D\u00e9pendances"},{"location":"FR/dependances/#installation-des-dependances","text":"Pour le bon fonctionnement du projet, vous avez besoin d'installer plusieurs d\u00e9pendances. Vous avez besoin des d\u00e9pendances suivantes : - numpy sert \u00e0 cr\u00e9er et manipuler des tableaux multidimensionnels et permet l'utilisation de fonctions math\u00e9matiques dans les dits tableaux. - pandas nous permet la manipulation et l'analyse de donn\u00e9es num\u00e9riques et de s\u00e9ries temporelles. - seaborn nous sert d'interface permettant d'afficher les r\u00e9sultats sous forme de graphiques statistiques. - statsmodels regroupe les mod\u00e8les math\u00e9matiques statistiques existants afin de faire des pr\u00e9visions. - mlxtend est un module de machine learning analysant les donn\u00e9es pour pouvoir ensuite se d\u00e9velopper et affiner les pr\u00e9visions.","title":"Installation des d\u00e9pendances"},{"location":"FR/dependances/#windows","text":"Vous pouvez installer les d\u00e9pendances soit avec Anaconda (m\u00e9thode 1) , soit avec pip (m\u00e9thode 2) .","title":"Windows"},{"location":"FR/dependances/#methode-1-anaconda","text":"Cette m\u00e9thode est plus simple, car vous allez installer Anaconda qui installera une partie des autres d\u00e9pendances (Numpy, Pandas) n\u00e9cessaires au projet. T\u00e9l\u00e9chargez la derni\u00e8re version de Anaconda pour Windows sur le site . Ex\u00e9cutez le fichier .exe , suivez les instructions qui apparaissent \u00e0 l'\u00e9cran jusqu'\u00e0 terminer l'installation. Ensuite vous allez installer la derni\u00e8re d\u00e9pendance n\u00e9cessaire mlxtend, donc ouvrir un Terminal d'Anaconda par l'outil de recherche Windows en tapant \"Anaconda Powershell Prompt\", et copiez la commande suivante : conda install mlxtend --channel conda-forge Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es.","title":"M\u00e9thode 1 : Anaconda"},{"location":"FR/dependances/#methode-2-pip","text":"V\u00e9rifiez que pip est install\u00e9 avec la commande : pip -V S'il n'est pas install\u00e9, t\u00e9l\u00e9chargez le fichier python get-pip.py . Placez ce fichier python dans le dossier d'installation, le chemin d'acc\u00e8s \u00e0 ce dossier ressemble \u00e0 C:\\Users\\XXX\\AppData\\Local\\Programs\\Python\\Python-38\\ Python-38 correspond \u00e0 la version de votre Python, que vous pouvez connaitre en ouvrant un cmd et en tapant la commande python --version . XXX correspond \u00e0 votre nom d'utilisateur Windows. Ensuite ouvrez un cmd, et naviguez jusqu'\u00e0 ce dossier Python avec la commande cd C:\\Users\\XXXX\\AppData\\Local\\Programs\\Python\\Python-38\\ Puis ensuite ex\u00e9cutez le script : python get-pip.py Et voila ! pip est maintenant install\u00e9 sur votre syst\u00e8me. Vous pouvez v\u00e9rifier de nouveau avec la commande : pip -V Maintenant vous pouvez installer les d\u00e9pendances. Tout d'abord, t\u00e9l\u00e9chargez le zip du projet . D\u00e9zippez-le, ouvez un CMD et tapez les commandes suivantes : cd C:\\Users\\XXX\\Documents\\Projet-Python-INSA-3A #Par exemple, d\u00e9pend de l\u00e0 o\u00f9 vous l'avez mis, ici c'est dans les Documents pip install -r requirements.txt Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es.","title":"M\u00e9thode 2 : pip"},{"location":"FR/dependances/#mac","text":"Pour installer ces d\u00e9pendances, vous utiliserez pip un gestionnaire de paquets Python. Installez pip avec les commandes suivantes : curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py pip est normalement install\u00e9. Pour v\u00e9rifier, tapez : pip --version T\u00e9l\u00e9chargez le zip du projet \u00e0 cette adresse ou avec la commande suivante : curl -LJO https://github.com/AlexTheGeek/Python-Project-INSA-3A/archive/V0.1.1.zip Ouvrez un Terminal et tapez les commandes suivantes : unzip Python-Project-INSA-3A-v0.1.1.zip cd Project-Python-3A-MRI pip install -r requirements.txt Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es.","title":"Mac"},{"location":"FR/dependances/#linux","text":"Pour installer les d\u00e9pendances, il faut que pip soit install\u00e9 sur votre syst\u00e8me : Sur Ubuntu pour installer pip, vous pouvez taper la commande suivante : sudo apt-get install python3-pip . Dans la suite vous utiliserez la commande pip mais en passant par le gestionnaire de paquets apt , pour cela il faudra taper la commande pip3 . curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python3 get-pip.py Pip est normalement install\u00e9. Pour v\u00e9rifier sa version, tapez : pip --version Maintenant vous pouvez installer les d\u00e9pendances. T\u00e9l\u00e9chargez le zip du projet \u00e0 cette adresse ou avec la commande suivante : curl -LJO https://github.com/AlexTheGeek/Python-Project-INSA-3A/archive/V0.1.1.zip Ouvrez un Terminal et tapez les commandes suivantes : unzip Python-Project-INSA-3A-v0.1.1.zip cd Project-Python-3A-MRI pip install -r requirements.txt Maintenant toutes les d\u00e9pendances n\u00e9cessaires sont install\u00e9es.","title":"Linux"},{"location":"FR/ide/","text":"Installation d'un IDE Vous pouvez installer un des deux IDE (Integrated Development Environment) suivants pour la suite du projet. Visual Studio Code est un IDE disponible sur Mac, Windows et Linux tandis que Spyder IDE n'est disponible que sur Mac et Windows. Visual Studio Code Windows - Mac T\u00e9l\u00e9chargez le fichier .exe disponible sur la page de Visual Studio Code . Ensuite il suffit d'ex\u00e9cuter le fichier .exe t\u00e9l\u00e9charg\u00e9 pr\u00e9c\u00e8demment. Suivez les instructions \u00e0 l'\u00e9cran pour l'installer. Une fois install\u00e9 vous pouvez le lancer et commencer \u00e0 coder. Linux Ubuntu, Debian T\u00e9l\u00e9chargez le fichier .deb disponible sur la page de Visual Studio Code . Ensuite, ouvrez un Terminal, naviguez jusqu'au dossier o\u00f9 le fichier deb a \u00e9t\u00e9 t\u00e9l\u00e9charg\u00e9 (avec la commande cd ) et tapez la commande suivante : sudo dpkg -i nom_du_paquet_deb.deb #Remplacer nom_du_paquet_deb.deb par votre nom de paquet Spyder IDE Python (Windows - Mac) T\u00e9l\u00e9chargez le fichier .exe disponible sur la page de Spyder IDE . Ensuite il suffit d'ex\u00e9cuter le fichier .exe t\u00e9l\u00e9charg\u00e9 pr\u00e9c\u00e8demment. Suivez les instructions \u00e0 l'\u00e9cran pour l'installer. Une fois install\u00e9 vous pouvez le lancer et commencer \u00e0 coder.","title":"IDE"},{"location":"FR/ide/#installation-dun-ide","text":"Vous pouvez installer un des deux IDE (Integrated Development Environment) suivants pour la suite du projet. Visual Studio Code est un IDE disponible sur Mac, Windows et Linux tandis que Spyder IDE n'est disponible que sur Mac et Windows.","title":"Installation d'un IDE"},{"location":"FR/ide/#visual-studio-code","text":"","title":"Visual Studio Code"},{"location":"FR/ide/#windows-mac","text":"T\u00e9l\u00e9chargez le fichier .exe disponible sur la page de Visual Studio Code . Ensuite il suffit d'ex\u00e9cuter le fichier .exe t\u00e9l\u00e9charg\u00e9 pr\u00e9c\u00e8demment. Suivez les instructions \u00e0 l'\u00e9cran pour l'installer. Une fois install\u00e9 vous pouvez le lancer et commencer \u00e0 coder.","title":"Windows - Mac"},{"location":"FR/ide/#linux","text":"","title":"Linux"},{"location":"FR/ide/#ubuntu-debian","text":"T\u00e9l\u00e9chargez le fichier .deb disponible sur la page de Visual Studio Code . Ensuite, ouvrez un Terminal, naviguez jusqu'au dossier o\u00f9 le fichier deb a \u00e9t\u00e9 t\u00e9l\u00e9charg\u00e9 (avec la commande cd ) et tapez la commande suivante : sudo dpkg -i nom_du_paquet_deb.deb #Remplacer nom_du_paquet_deb.deb par votre nom de paquet","title":"Ubuntu, Debian"},{"location":"FR/ide/#spyder-ide-python-windows-mac","text":"T\u00e9l\u00e9chargez le fichier .exe disponible sur la page de Spyder IDE . Ensuite il suffit d'ex\u00e9cuter le fichier .exe t\u00e9l\u00e9charg\u00e9 pr\u00e9c\u00e8demment. Suivez les instructions \u00e0 l'\u00e9cran pour l'installer. Une fois install\u00e9 vous pouvez le lancer et commencer \u00e0 coder.","title":"Spyder IDE Python (Windows - Mac)"},{"location":"FR/objectif/","text":"Objectifs Python est un langage de programmation tr\u00e8s populaire dans le monde informatique pour r\u00e9aliser des t\u00e2ches vari\u00e9es tel que l'automatisation, les sites internets, l'Intelligence Artificielle (IA), etc. Notre objectif est de comprendre en d\u00e9tail le code donn\u00e9 mais aussi le simplifier, en gardant uniquement les d\u00e9pendances utiles au projet. Cela nous permettra de r\u00e9aliser une documentation claire pour utiliser le script sur un ordinateur neuf et par une personne pas forc\u00e9ment form\u00e9e pour son utilisation. Dans un second temps, nous pourrons \u00e9largir ce code aux bases de donn\u00e9es disponibles sur le site kaggle .","title":"Objectifs"},{"location":"FR/objectif/#objectifs","text":"Python est un langage de programmation tr\u00e8s populaire dans le monde informatique pour r\u00e9aliser des t\u00e2ches vari\u00e9es tel que l'automatisation, les sites internets, l'Intelligence Artificielle (IA), etc. Notre objectif est de comprendre en d\u00e9tail le code donn\u00e9 mais aussi le simplifier, en gardant uniquement les d\u00e9pendances utiles au projet. Cela nous permettra de r\u00e9aliser une documentation claire pour utiliser le script sur un ordinateur neuf et par une personne pas forc\u00e9ment form\u00e9e pour son utilisation. Dans un second temps, nous pourrons \u00e9largir ce code aux bases de donn\u00e9es disponibles sur le site kaggle .","title":"Objectifs"},{"location":"FR/python/","text":"Installation de Python Ce projet fonctionne sur un environnement Python, et de pr\u00e9f\u00e9rence sur la version Python 3.8.0 (version v\u00e9rifi\u00e9e pour ce projet). Windows T\u00e9l\u00e9chargez le fichier exe sur le site officiel Python de la version Python 3.8.0. Ex\u00e9cutez le fichier .exe . Commencez par cocher les deux cases en bas sur la premi\u00e8re fen\u00eatre de dialogue, comme sur l'image qui suit. Allez dans les Advanced Options , cochez toutes les cases, permettant ainsi d'installer pip (un gestionnaire de paquets utiles par la suite), puis revenez en arri\u00e8re, et avancez jusqu'\u00e0 l'installation compl\u00e8te. \u00c0 la fin de l'ex\u00e9cution, Python est compl\u00e9tement install\u00e9 sur votre syst\u00e8me. Pour v\u00e9rifier que Python est bien install\u00e9, ouvrez un CMD et tapez la commande suivante : python --version #Vous devez obtenir le r\u00e9sultat suivant Python 3.8.0 Mac Deux m\u00e9thodes s'offrent \u00e0 vous, soit passant par le site officiel (m\u00e9thode simple) , soit en ligne de commandes avec Homebrew . 1\u00e8re m\u00e9thode : Site Officiel T\u00e9l\u00e9chargez le package sur le site officiel Python de la version Python 3.8.0. Ex\u00e9cutez le fichier .pkg et suivez les diff\u00e9rentes \u00e9tapes sur l'\u00e9cran. \u00c0 la fin de l'ex\u00e9cution, Python est compl\u00e9tement install\u00e9 sur votre syst\u00e8me. Pour v\u00e9rifier que Python est bien install\u00e9, ouvrez un Terminal ett tapez la commande suivante : python --version #Vous devez obtenir le r\u00e9sultat suivant Python 3.8.0 2\u00e8me m\u00e9thode : Homebrew Pour installer Homebrew, ouvrez un Terminal et tapez la commande : /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" Puis installez Python avec la commande suivante : brew install python@3.8 \u00c0 la fin de l'ex\u00e9cution, Python est compl\u00e9tement install\u00e9 sur votre syst\u00e8me. Pour v\u00e9rifier que Python est bien install\u00e9, ouvrez un Terminal et tapez la commande suivante : python --version #Vous devez obtenir le r\u00e9sultat suivant Python 3.8.0 Linux Dans un Terminal, tapez la commande suivante : sudo apt-get install python3.8 Pour v\u00e9rifier que Python est bien install\u00e9, tapez la commande suivante : python --version #Vous devez obtenir le r\u00e9sultat suivant Python 3.8.0","title":"Python"},{"location":"FR/python/#installation-de-python","text":"Ce projet fonctionne sur un environnement Python, et de pr\u00e9f\u00e9rence sur la version Python 3.8.0 (version v\u00e9rifi\u00e9e pour ce projet).","title":"Installation de Python"},{"location":"FR/python/#windows","text":"T\u00e9l\u00e9chargez le fichier exe sur le site officiel Python de la version Python 3.8.0. Ex\u00e9cutez le fichier .exe . Commencez par cocher les deux cases en bas sur la premi\u00e8re fen\u00eatre de dialogue, comme sur l'image qui suit. Allez dans les Advanced Options , cochez toutes les cases, permettant ainsi d'installer pip (un gestionnaire de paquets utiles par la suite), puis revenez en arri\u00e8re, et avancez jusqu'\u00e0 l'installation compl\u00e8te. \u00c0 la fin de l'ex\u00e9cution, Python est compl\u00e9tement install\u00e9 sur votre syst\u00e8me. Pour v\u00e9rifier que Python est bien install\u00e9, ouvrez un CMD et tapez la commande suivante : python --version #Vous devez obtenir le r\u00e9sultat suivant Python 3.8.0","title":"Windows"},{"location":"FR/python/#mac","text":"Deux m\u00e9thodes s'offrent \u00e0 vous, soit passant par le site officiel (m\u00e9thode simple) , soit en ligne de commandes avec Homebrew .","title":"Mac"},{"location":"FR/python/#1ere-methode-site-officiel","text":"T\u00e9l\u00e9chargez le package sur le site officiel Python de la version Python 3.8.0. Ex\u00e9cutez le fichier .pkg et suivez les diff\u00e9rentes \u00e9tapes sur l'\u00e9cran. \u00c0 la fin de l'ex\u00e9cution, Python est compl\u00e9tement install\u00e9 sur votre syst\u00e8me. Pour v\u00e9rifier que Python est bien install\u00e9, ouvrez un Terminal ett tapez la commande suivante : python --version #Vous devez obtenir le r\u00e9sultat suivant Python 3.8.0","title":"1\u00e8re m\u00e9thode : Site Officiel"},{"location":"FR/python/#2eme-methode-homebrew","text":"Pour installer Homebrew, ouvrez un Terminal et tapez la commande : /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" Puis installez Python avec la commande suivante : brew install python@3.8 \u00c0 la fin de l'ex\u00e9cution, Python est compl\u00e9tement install\u00e9 sur votre syst\u00e8me. Pour v\u00e9rifier que Python est bien install\u00e9, ouvrez un Terminal et tapez la commande suivante : python --version #Vous devez obtenir le r\u00e9sultat suivant Python 3.8.0","title":"2\u00e8me m\u00e9thode : Homebrew"},{"location":"FR/python/#linux","text":"Dans un Terminal, tapez la commande suivante : sudo apt-get install python3.8 Pour v\u00e9rifier que Python est bien install\u00e9, tapez la commande suivante : python --version #Vous devez obtenir le r\u00e9sultat suivant Python 3.8.0","title":"Linux"},{"location":"FR/sources/","text":"Sources Retrouver les documentations officielles des librairies utilis\u00e9es dans ce projet : - pandas - matplotlib - searborn - numpy","title":"Sources"},{"location":"FR/sources/#sources","text":"Retrouver les documentations officielles des librairies utilis\u00e9es dans ce projet : - pandas - matplotlib - searborn - numpy","title":"Sources"}]}